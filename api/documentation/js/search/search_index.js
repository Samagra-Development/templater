var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,0.89,1,2.023]],["body/controllers/AppController.html",[0,1.416,1,3.218,2,1.457,3,0.404,4,0.404,5,0.349,6,3.334,7,0.461,8,1.679,9,5.751,10,5.02,11,2.084,12,0.033,13,5.02,14,1.035,15,4.002,16,1.457,17,1.457,18,0.52,19,1.129,20,0.789,21,1.338,22,0.553,23,0.648,24,2.894,25,2.565,26,4.002,27,5.02,28,0.404,29,0.717,30,1.229,31,2.084,32,0.026,33,0.026]],["title/modules/AppModule.html",[34,1.644,35,2.023]],["body/modules/AppModule.html",[2,1.33,3,0.253,4,0.253,5,0.219,12,0.034,22,0.614,23,0.406,28,0.253,29,0.449,32,0.019,33,0.019,34,1.903,35,4.043,36,1.306,37,2.103,38,2.089,39,2.089,40,2.089,41,2.089,42,3.025,43,2.799,44,2.738,45,2.738,46,2.277,47,2.277,48,2.277,49,1.482,50,2.277,51,2.086,52,2.642,53,1.813,54,1.813,55,2.507,56,2.642,57,2.481,58,2.481,59,2.481,60,2.246,61,2.763,62,2.642,63,3.044,64,2.089,65,0.995,66,1.607,67,2.089,68,2.089,69,2.089,70,2.089,71,2.089,72,2.089,73,2.089,74,2.089,75,2.089,76,2.089,77,2.507,78,2.507]],["title/injectables/AppService.html",[44,1.644,79,0.459]],["body/injectables/AppService.html",[3,0.355,4,0.355,5,0.307,7,0.405,8,1.545,12,0.033,14,1.335,16,1.682,17,1.682,18,0.6,19,1.303,20,0.911,21,1.545,22,0.521,23,0.569,28,0.355,29,0.63,30,1.419,32,0.024,33,0.024,44,2.407,49,1.545,65,1.396,79,0.672,80,1.281,81,2.93,82,2.318,83,3.849,84,5.48,85,1.281,86,2.93,87,3.517,88,2.048,89,3.849,90,3.308,91,3.517,92,2.374,93,3.517,94,1.176,95,0.833,96,2.024,97,2.93,98,3.517]],["title/injectables/AuditService.html",[45,1.644,79,0.459]],["body/injectables/AuditService.html",[3,0.472,4,0.472,5,0.409,12,0.032,22,0.472,23,0.758,28,0.472,29,0.838,32,0.028,33,0.028,45,2.877,79,0.804,80,1.705,99,3.901]],["title/injectables/EjsService.html",[46,1.367,79,0.459]],["body/injectables/EjsService.html",[3,0.392,4,0.392,5,0.339,7,0.447,12,0.033,14,1.4,18,0.505,20,0.972,22,0.497,23,0.629,28,0.392,29,0.696,30,1.194,32,0.025,33,0.025,46,2.135,79,0.717,80,1.415,85,1.97,100,3.237,101,1.514,102,5.411,103,2.565,104,4.928,105,4.741,106,2.024,107,2.024,108,3.886,109,2.81,110,1.39,111,2.81,112,3.886]],["title/controllers/I18nController.html",[0,0.89,61,2.023]],["body/controllers/I18nController.html",[0,0.51,2,0.659,3,0.183,4,0.183,5,0.158,7,0.208,8,0.954,11,1.486,12,0.034,14,0.738,16,1.039,17,1.039,18,0.459,19,0.805,20,0.357,21,0.954,22,0.522,23,0.293,28,0.183,29,0.324,30,0.876,32,0.015,33,0.015,46,1.53,47,1.53,48,1.53,49,0.805,50,1.53,51,1.401,61,1.829,65,0.718,66,1.16,82,1.838,85,0.659,88,1.132,90,2.264,92,1.736,94,1.68,95,0.429,103,1.353,106,1.486,113,1.508,114,1.16,115,1.81,116,2.942,117,1.508,118,2.264,119,1.81,120,2.377,121,1.16,122,1.687,123,2.853,124,1.81,125,1.181,126,1.16,127,1.16,128,1.236,129,1.508,130,0.784,131,0.718,132,1.16,133,1.81,134,1.508,135,1.508,136,1.81,137,2.413,138,2.666,139,1.508,140,1.16,141,2.693,142,2.853,143,1.16,144,1.9,145,2.063,146,1.039,147,2.377,148,2.898,149,1.829,150,2.306,151,2.569,152,2.853,153,1.81,154,4.008,155,1.53,156,1.81,157,1.81,158,1.81,159,1.042,160,1.81,161,1.81,162,4.573,163,2.264,164,2.377,165,2.377,166,2.377,167,2.377,168,4.633,169,2.377,170,2.377,171,3.859,172,2.377,173,1.81,174,2.942,175,1.81,176,3.339,177,2.377,178,1.81,179,2.063,180,1.829,181,2.377,182,2.377,183,2.377,184,1.309,185,2.853,186,1.81,187,1.508,188,1.508,189,1.81,190,1.81,191,3.531,192,1.81,193,1.81,194,1.042,195,0.784,196,1.508]],["title/injectables/JinjaService.html",[47,1.367,79,0.459]],["body/injectables/JinjaService.html",[3,0.361,4,0.361,5,0.312,7,0.412,12,0.034,14,1.427,18,0.465,20,0.921,22,0.361,23,0.579,28,0.361,29,0.64,30,1.435,32,0.024,33,0.024,47,2.023,79,0.68,80,1.302,85,1.894,101,1.435,103,2.466,106,2.433,107,2.433,109,3.377,110,1.467,111,2.586,151,2.292,197,2.979,198,4.333,199,5.202,200,4.671,201,3.576,202,3.576,203,3.576,204,3.576,205,3.576,206,3.576,207,4.671,208,3.576]],["title/injectables/JsTLService.html",[48,1.367,79,0.459]],["body/injectables/JsTLService.html",[3,0.324,4,0.324,5,0.28,7,0.37,12,0.034,14,1.275,20,0.858,22,0.324,23,0.52,28,0.324,29,0.575,30,1.623,32,0.022,33,0.022,48,1.884,79,0.633,80,1.17,94,1.454,101,1.336,103,2.338,106,2.568,107,2.568,109,2.323,110,1.227,111,4.209,155,1.884,184,2.323,209,2.676,210,4.931,211,4.931,212,3.212,213,3.212,214,3.212,215,4.931,216,2.676,217,3.212,218,3.212,219,2.676,220,2.062,221,3.212,222,3.212,223,3.212,224,3.212,225,4.349,226,3.212,227,3.212,228,4.349,229,3.212,230,2.323,231,3.212,232,3.212]],["title/controllers/LambdaController.html",[0,0.89,57,1.816]],["body/controllers/LambdaController.html",[0,0.647,2,0.835,3,0.231,4,0.231,5,0.2,7,0.264,8,1.144,11,2.363,12,0.034,14,1.174,16,1.652,17,1.652,18,0.661,19,1.279,20,0.895,21,1.517,22,0.532,23,0.371,24,1.658,25,1.47,28,0.231,29,0.411,30,1.491,31,1.194,32,0.018,33,0.018,49,0.965,57,1.969,60,1.94,65,0.91,82,2.301,85,0.835,88,1.358,92,2.348,94,0.767,95,0.543,103,1.622,110,1.436,114,1.47,118,2.623,121,1.47,122,1.854,125,1.144,126,1.47,127,1.47,128,0.993,131,0.91,132,1.47,137,1.782,138,1.32,140,1.47,144,1.087,146,1.92,155,1.482,163,1.47,184,1.658,194,1.32,233,1.91,234,3.263,235,3.409,236,2.193,237,2.474,238,1.91,239,1.782,240,2.293,241,1.658,242,2.474,243,2.293,244,1.658,245,2.474,246,2.293,247,2.474,248,2.293,249,1.47,250,1.194,251,0.993,252,2.293,253,2.293,254,2.85,255,1.91,256,1.91,257,1.91,258,1.91,259,4.092,260,2.293,261,3.421,262,2.293,263,2.293,264,2.293,265,1.91,266,2.293,267,2.293,268,1.91,269,1.658,270,2.293,271,2.193,272,1.658]],["title/controllers/LambdaService.html",[0,0.89,60,1.497]],["body/controllers/LambdaService.html",[0,0.85,2,0.707,3,0.196,4,0.196,5,0.169,7,0.223,8,1.008,11,1.011,12,0.034,14,0.955,16,1.345,17,1.345,18,0.586,19,1.042,20,0.889,21,1.235,22,0.533,23,0.314,24,1.404,25,1.244,28,0.196,29,0.348,30,1.384,31,1.569,32,0.016,33,0.016,43,1.751,49,0.85,60,1.428,65,0.77,79,0.438,82,1.893,88,1.466,92,1.803,95,0.46,96,1.117,110,1.345,125,1.008,137,1.011,143,2.889,144,1.428,146,1.097,155,2.382,159,1.734,216,2.51,219,2.51,234,3.387,239,1.569,249,2.669,250,1.924,251,0.841,254,1.617,257,3.077,258,1.617,271,1.244,273,1.617,274,3.013,275,3.755,276,3.013,277,3.013,278,1.941,279,1.941,280,1.941,281,3.013,282,3.013,283,1.941,284,3.077,285,2.51,286,2.51,287,1.404,288,1.941,289,1.941,290,1.941,291,1.941,292,1.941,293,1.617,294,1.941,295,1.941,296,1.941,297,1.941,298,1.941,299,1.941,300,1.941,301,1.941,302,1.941,303,1.941,304,1.941,305,1.974,306,1.941,307,2.671,308,1.941,309,3.693,310,3.013,311,1.941,312,1.941,313,2.671,314,1.617,315,2.671,316,3.259,317,1.404,318,1.941,319,1.941,320,1.617,321,2.671,322,3.259,323,1.617,324,3.013,325,3.013,326,1.941,327,1.941,328,1.941,329,1.941,330,1.941,331,3.013,332,1.941,333,1.941,334,1.941,335,1.941,336,1.941,337,3.013,338,1.941,339,1.617,340,1.617,341,1.941,342,1.941]],["title/injectables/PrismaService.html",[49,0.89,79,0.459]],["body/injectables/PrismaService.html",[3,0.341,4,0.341,5,0.295,7,0.389,8,1.506,12,0.033,14,1.31,16,1.232,17,1.232,18,0.44,19,0.954,21,1.506,22,0.454,23,0.548,28,0.341,29,0.606,32,0.023,33,0.023,49,1.27,79,0.655,80,1.232,82,2.341,95,0.802,101,1.384,106,1.763,107,1.763,137,2.637,138,2.913,144,2.135,343,2.819,344,4.504,345,5.063,346,5.397,347,4.504,348,4.815,349,4.504,350,5.397,351,3.384,352,3.384,353,3.384,354,2.887,355,4.504,356,3.384,357,2.819,358,3.384,359,3.384,360,3.384,361,3.384,362,3.384,363,3.384,364,3.384]],["title/modules/RPCModule.html",[34,1.644,365,2.283]],["body/modules/RPCModule.html",[1,3.318,2,1.69,3,0.357,4,0.357,5,0.309,12,0.034,22,0.638,23,0.573,28,0.357,29,0.634,32,0.024,33,0.024,34,2.417,36,1.844,44,1.844,45,1.844,46,1.534,47,1.534,48,1.534,49,0.998,50,1.534,51,1.405,56,2.56,57,2.037,58,2.037,59,2.037,60,1.678,62,2.56,64,2.949,65,1.405,66,2.269,67,2.949,68,2.949,69,2.949,70,2.949,71,2.949,72,2.949,73,2.949,74,2.949,75,2.949,365,3.356,366,3.54,367,3.54]],["title/interfaces/RenderDto.html",[122,1.149,368,1.056]],["body/interfaces/RenderDto.html",[3,0.371,4,0.371,5,0.321,7,0.423,12,0.033,18,0.724,19,1.341,20,1.166,22,0.371,28,0.562,32,0.024,33,0.024,94,1.228,95,0.87,101,1.46,110,1.72,122,1.731,125,1.228,128,2.414,130,1.591,131,1.458,141,1.913,146,2.029,195,1.591,220,2.736,251,1.591,305,1.742,368,1.863,369,2.114,370,2.745,371,1.886]],["title/interfaces/RenderDtoTest.html",[130,1.367,368,1.056]],["body/interfaces/RenderDtoTest.html",[3,0.373,4,0.373,5,0.323,7,0.426,12,0.033,18,0.783,20,1.043,22,0.373,28,0.564,32,0.025,33,0.025,94,1.237,95,0.876,101,1.467,110,1.722,122,1.347,125,1.868,128,2.566,130,2.068,131,1.468,141,1.926,146,1.347,195,1.602,220,2.263,251,1.602,305,1.753,368,1.868,369,2.128,370,1.926,371,2.295]],["title/interfaces/RenderResponse.html",[131,1.253,368,1.056]],["body/interfaces/RenderResponse.html",[3,0.351,4,0.351,5,0.304,7,0.401,12,0.033,18,0.757,19,1.295,20,1.149,22,0.351,28,0.551,32,0.024,33,0.024,94,1.826,95,0.825,101,1.41,110,1.762,122,1.268,125,1.165,128,2.643,130,1.509,131,1.822,141,2.843,146,1.268,195,2.365,220,2.176,251,1.509,305,1.651,368,1.826,369,2.004,370,1.814,371,1.822]],["title/interfaces/RunFeedback.html",[250,1.644,368,1.056]],["body/interfaces/RunFeedback.html",[3,0.364,4,0.364,5,0.315,7,0.416,12,0.033,18,0.779,19,1.561,22,0.364,28,0.474,32,0.024,33,0.024,95,0.855,101,1.444,110,1.748,125,1.208,249,2.315,250,2.449,251,1.565,284,4.354,305,2.625,313,4.004,315,4.004,316,4.004,321,4.004,322,4.004,368,1.208,370,3.065,372,2.612]],["title/interfaces/SampleData.html",[368,1.056,371,1.253]],["body/interfaces/SampleData.html",[3,0.376,4,0.376,5,0.325,7,0.429,12,0.033,18,0.728,20,1.17,22,0.376,28,0.565,32,0.025,33,0.025,94,1.245,95,0.882,101,1.473,110,1.725,122,1.356,125,1.245,128,2.426,130,1.613,131,1.478,141,1.94,146,1.356,195,1.613,220,2.748,251,1.613,305,2.656,368,1.873,369,2.143,370,1.94,371,2.105]],["title/modules/SingletonServiceModule.html",[34,1.644,42,1.816]],["body/modules/SingletonServiceModule.html",[2,1.42,3,0.393,4,0.393,5,0.34,12,0.033,22,0.498,23,0.631,28,0.393,29,0.698,32,0.025,33,0.025,34,2.573,36,2.031,37,2.842,42,3.51,43,3.034,52,3.572,53,2.82,54,2.82,56,3.572,62,2.82,63,4.115,76,3.249,96,2.244,373,3.9,374,3.9,375,3.9,376,3.9]],["title/controllers/TemplateController.html",[0,0.89,59,1.816]],["body/controllers/TemplateController.html",[0,0.734,2,0.588,3,0.163,4,0.163,5,0.141,7,0.186,8,0.871,11,2.294,12,0.034,14,1.139,16,1.604,17,1.604,18,0.572,19,1.242,20,0.869,21,1.473,22,0.502,23,0.261,28,0.163,29,0.289,30,1.265,32,0.013,33,0.013,46,1.418,47,1.418,48,1.418,49,0.734,50,1.418,51,1.299,59,1.498,65,0.641,66,1.035,82,2.252,85,0.588,88,1.033,90,1.669,92,2.264,94,1.473,95,0.382,103,1.235,106,1.356,110,1.242,114,1.035,116,2.169,117,1.345,118,1.669,120,1.345,121,1.035,122,1.604,125,0.54,126,1.035,127,1.035,128,1.418,129,1.345,130,2.007,131,0.641,132,1.035,134,1.345,135,1.345,137,2.294,138,2.535,139,1.345,140,1.035,141,2.722,144,1.552,145,1.167,146,1.687,147,1.345,148,1.883,149,1.035,150,1.883,151,1.035,155,1.418,159,0.929,162,4.727,163,1.669,164,2.169,165,2.169,166,2.169,167,2.169,169,2.169,170,1.345,171,3.67,172,2.169,174,3.129,176,3.129,177,2.169,179,1.883,180,1.669,181,2.169,182,2.169,183,2.169,194,1.498,195,0.699,196,1.345,236,1.669,237,1.883,241,1.167,242,1.883,244,1.167,245,1.883,247,1.883,269,1.167,271,1.669,272,1.167,323,2.169,339,2.169,340,2.169,377,1.345,378,2.604,379,2.604,380,1.614,381,1.614,382,1.614,383,1.614,384,1.614,385,2.604,386,1.614,387,1.614,388,2.604,389,1.614,390,1.614,391,1.614,392,1.614,393,1.614,394,1.614,395,2.604,396,3.273,397,1.614,398,1.614,399,1.614,400,1.614,401,1.614,402,1.614,403,1.614]],["title/injectables/TemplateService.html",[50,1.367,79,0.459]],["body/injectables/TemplateService.html",[3,0.239,4,0.239,5,0.207,7,0.273,8,1.172,12,0.034,14,1.332,16,1.876,17,1.876,18,0.739,19,1.453,20,0.97,21,1.645,22,0.421,23,0.383,28,0.239,29,0.424,30,1.582,32,0.018,33,0.018,49,1.3,50,1.518,65,0.94,79,0.51,80,0.863,82,2.38,83,2.92,85,0.863,86,1.974,88,1.655,89,2.92,90,2.674,92,2.463,94,1.542,95,0.561,96,1.363,97,1.974,143,1.519,145,1.713,148,1.713,149,1.519,151,1.519,155,1.518,180,2.247,187,1.974,236,2.674,239,2.401,265,1.974,370,1.825,404,1.974,405,3.505,406,2.369,407,2.369,408,2.369,409,5.473,410,2.369,411,2.369,412,2.369,413,4.171,414,3.505,415,2.369,416,4.61,417,3.505,418,2.369,419,4.171,420,4.171,421,4.171,422,2.369,423,4.171,424,2.369,425,2.369,426,2.369,427,2.369,428,2.369,429,2.369,430,2.369,431,2.369]],["title/controllers/TransformerController.html",[0,0.89,58,1.816]],["body/controllers/TransformerController.html",[0,0.491,2,0.633,3,0.176,4,0.176,5,0.152,7,0.2,8,0.925,11,2.228,12,0.034,14,1.106,16,1.558,17,1.558,18,0.694,19,1.206,20,0.844,21,1.43,22,0.459,23,0.282,28,0.176,29,0.312,30,1.607,31,1.44,32,0.014,33,0.014,49,0.78,51,1.365,58,1.591,65,0.69,82,2.243,85,0.633,88,1.097,92,2.266,95,0.412,103,1.311,110,1.284,114,1.115,118,2.206,121,1.115,122,1.658,125,1.151,126,1.115,127,1.115,132,1.115,137,1.44,138,1.001,140,1.115,143,2.513,144,0.825,146,1.739,150,3.01,155,0.754,159,2.621,163,1.772,194,2.621,234,1.115,235,2.867,236,1.772,237,1.999,238,1.449,239,1.44,241,1.258,242,1.999,244,1.258,245,1.999,247,1.999,250,0.906,255,1.449,268,2.303,269,1.258,271,1.772,272,1.258,305,2.028,307,3.691,313,3.093,315,3.093,316,3.093,321,3.093,322,3.093,371,1.097,432,1.449,433,3.92,434,1.74,435,1.74,436,1.74,437,1.74,438,1.74,439,2.765,440,1.74,441,1.449,442,1.74,443,1.74,444,1.74,445,2.765,446,2.303,447,2.303,448,2.765,449,2.765,450,2.303,451,2.765,452,4.554,453,2.765,454,2.303,455,1.74,456,1.74,457,2.765,458,2.765,459,2.765,460,2.765,461,1.74,462,1.74,463,1.74,464,1.74,465,1.74]],["title/injectables/TransformerService.html",[51,1.253,79,0.459]],["body/injectables/TransformerService.html",[3,0.217,4,0.217,5,0.187,7,0.247,8,1.089,12,0.034,14,1.135,16,1.598,17,1.598,18,0.733,19,1.238,20,1.127,21,1.315,22,0.443,23,0.347,28,0.217,29,0.384,30,1.525,31,1.118,32,0.017,33,0.017,51,1.292,60,2.354,79,0.474,80,0.782,82,1.97,85,0.782,92,1.901,95,0.771,96,1.235,107,2.048,110,1.612,144,1.543,146,0.782,150,2.857,155,2.302,179,1.552,188,1.788,195,0.93,220,2.709,230,1.552,234,2.813,239,2.286,256,1.788,275,3.276,307,1.552,354,1.376,371,1.292,441,3.276,446,3.276,447,1.788,450,1.788,466,1.788,467,3.932,468,3.932,469,2.146,470,2.146,471,2.146,472,2.146,473,2.146,474,2.146,475,4.388,476,2.146,477,2.146,478,2.146,479,2.146,480,2.146,481,2.146,482,2.146,483,2.146,484,2.146,485,3.276,486,2.146,487,3.932,488,2.146,489,4.717,490,3.255,491,3.255,492,2.146,493,3.255,494,2.146,495,2.146,496,3.932,497,2.146,498,2.146,499,1.788,500,2.146,501,2.146,502,2.146,503,2.146,504,2.146]],["title/injectables/VMService.html",[43,1.497,79,0.459]],["body/injectables/VMService.html",[3,0.374,4,0.374,5,0.324,7,0.427,8,1.6,12,0.033,14,1.37,18,0.482,21,1.241,22,0.483,23,0.601,28,0.374,29,0.665,32,0.025,33,0.025,43,2.269,79,0.696,80,1.351,85,2.037,101,1.47,285,4.66,286,4.66,287,2.684,293,3.092,348,4.939,354,2.379,357,3.092,505,3.092,506,4.785,507,3.711,508,3.711,509,4.785,510,4.785,511,3.711,512,3.711,513,3.711,514,3.711,515,3.711]],["title/coverage.html",[516,3.581]],["body/coverage.html",[0,1.586,1,1.976,5,0.269,6,2.568,12,0.033,18,0.401,32,0.022,33,0.022,43,1.462,44,1.606,45,1.606,46,1.335,47,1.335,48,1.335,49,0.869,50,1.335,51,1.223,57,1.774,58,1.774,59,1.774,60,1.462,61,1.976,79,0.866,81,2.568,99,2.568,100,2.568,113,2.568,122,1.123,130,1.335,131,1.223,159,3.667,197,2.568,209,2.568,233,2.568,250,1.606,273,2.568,317,2.229,343,2.568,354,1.976,368,1.82,369,2.989,371,1.223,372,2.229,377,2.568,404,2.568,432,2.568,466,2.568,505,2.568,516,2.568,517,3.083,518,3.083,519,3.083,520,3.083,521,5.95,522,4.229,523,4.229,524,3.083,525,4.828,526,4.828,527,2.568,528,2.568,529,3.083,530,3.083]],["title/dependencies.html",[37,2.183,531,2.2]],["body/dependencies.html",[12,0.034,23,0.569,25,2.254,32,0.024,33,0.024,37,2.024,88,1.396,95,0.833,105,2.93,198,2.93,287,2.543,532,3.517,533,3.517,534,3.517,535,3.517,536,3.517,537,3.517,538,5.48,539,3.517,540,3.517,541,3.517,542,3.517,543,3.517,544,3.517,545,3.517,546,4.62,547,4.62,548,5.16,549,3.517,550,3.517,551,3.517,552,4.62,553,3.517,554,3.517,555,3.517,556,3.517,557,3.517,558,3.849,559,3.517,560,2.93,561,3.517,562,3.517,563,3.517,564,4.62,565,3.517,566,3.517,567,3.517,568,3.517,569,3.517,570,3.517,571,3.517,572,3.517,573,3.517,574,3.517,575,3.517,576,3.517,577,3.517,578,3.517,579,3.517]],["title/miscellaneous/functions.html",[580,1.693,581,3.161]],["body/miscellaneous/functions.html",[7,0.558,12,0.029,32,0.029,33,0.029,527,4.042,528,4.967,580,3.11,581,4.042,582,4.851]],["title/index.html",[7,0.304,583,2.641,584,2.641]],["body/index.html",[12,0.033,18,0.384,20,0.81,31,1.539,32,0.021,33,0.021,88,1.63,94,1.374,107,2.14,125,0.988,128,1.28,149,1.895,150,2.717,180,2.633,194,1.701,195,1.78,220,2.238,230,2.971,317,2.137,320,2.462,371,1.173,454,2.462,485,3.933,499,2.462,558,2.462,560,2.462,585,2.462,586,2.956,587,2.956,588,2.956,589,2.956,590,2.956,591,2.956,592,2.956,593,2.956,594,2.956,595,2.956,596,2.956,597,2.956,598,2.956,599,2.956,600,4.108,601,4.108,602,2.956,603,2.956,604,2.956,605,2.956,606,4.108,607,2.956,608,2.956,609,2.956,610,2.956,611,2.956,612,4.721,613,4.721,614,2.956,615,2.956,616,2.956,617,2.956,618,2.956,619,2.956,620,2.956,621,2.956,622,4.721,623,2.956,624,4.108,625,2.956,626,2.956,627,2.956,628,2.956,629,2.956,630,2.956,631,2.956,632,2.956,633,2.956,634,2.956,635,4.108,636,4.108,637,2.956,638,2.956,639,2.956,640,2.956,641,2.956,642,4.108,643,2.956,644,2.956,645,2.956,646,2.956,647,2.956,648,2.956,649,4.721,650,2.956,651,2.956,652,2.956,653,2.956,654,2.956,655,2.956,656,2.956,657,2.956,658,2.956]],["title/modules.html",[36,2.239]],["body/modules.html",[12,0.028,32,0.028,33,0.028,35,3.014,36,2.449,42,2.706,365,3.401,659,5.538,660,5.538,661,5.538,662,5.886,663,4.703,664,4.703]],["title/overview.html",[665,3.581]],["body/overview.html",[2,1.268,12,0.033,32,0.024,33,0.024,35,4.147,36,1.814,37,2.642,38,2.901,39,2.901,40,2.901,41,2.901,42,3.353,43,2.919,44,2.675,45,2.675,46,2.225,47,2.225,48,2.225,49,1.448,50,2.225,51,2.038,52,3.32,53,2.519,54,2.519,80,1.268,251,1.509,314,2.901,665,2.901,666,3.483,667,3.483,668,3.483]],["title/properties.html",[101,1.165,531,2.2]],["body/properties.html",[12,0.032,32,0.029,33,0.029,101,1.47,585,3.988,669,4.787,670,4.787,671,4.787,672,4.787,673,4.787]],["title/miscellaneous/typealiases.html",[580,1.693,674,3.794]],["body/miscellaneous/typealiases.html",[7,0.553,12,0.029,18,0.729,32,0.029,33,0.029,239,2.504,249,3.596,372,3.477,580,3.082,675,4.808,676,4.808]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":159,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaService.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{},"coverage.html":{}}}],["0.0.1",{"_index":670,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["0.6.9",{"_index":537,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":522,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":520,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":524,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":521,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":526,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":523,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":525,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"index.html":{}}}],["1).trim",{"_index":222,"title":{},"body":{"injectables/JsTLService.html":{}}}],["1.0.0",{"_index":562,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":540,"title":{},"body":{"dependencies.html":{}}}],["1.6.7",{"_index":534,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":454,"title":{},"body":{"controllers/TransformerController.html":{},"index.html":{}}}],["2.0.0",{"_index":567,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":314,"title":{},"body":{"controllers/LambdaService.html":{},"overview.html":{}}}],["3.0.2",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["3.1.6",{"_index":555,"title":{},"body":{"dependencies.html":{}}}],["3.2.1",{"_index":554,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":563,"title":{},"body":{"dependencies.html":{}}}],["3.5.0",{"_index":552,"title":{},"body":{"dependencies.html":{}}}],["3.9.7",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["4.15.0",{"_index":559,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":668,"title":{},"body":{"overview.html":{}}}],["5.1.5",{"_index":551,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":666,"title":{},"body":{"overview.html":{}}}],["6.0.3",{"_index":557,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":576,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":538,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":545,"title":{},"body":{"dependencies.html":{}}}],["8.2.6",{"_index":549,"title":{},"body":{"dependencies.html":{}}}],["8.4.4",{"_index":543,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":667,"title":{},"body":{"overview.html":{}}}],["abbreviations",{"_index":605,"title":{},"body":{"index.html":{}}}],["accomoactual",{"_index":484,"title":{},"body":{"injectables/TransformerService.html":{}}}],["add",{"_index":267,"title":{},"body":{"controllers/LambdaController.html":{}}}],["addlambda",{"_index":235,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TransformerController.html":{}}}],["addlambda(data",{"_index":238,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TransformerController.html":{}}}],["addtemplate",{"_index":116,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["addtemplate(templatedata",{"_index":117,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["aliases",{"_index":675,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":656,"title":{},"body":{"index.html":{}}}],["allowed",{"_index":183,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["api",{"_index":621,"title":{},"body":{"index.html":{}}}],["apis",{"_index":587,"title":{},"body":{"index.html":{}}}],["app",{"_index":352,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.close",{"_index":364,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":367,"title":{},"body":{"modules/RPCModule.html":{}}}],["app.service",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/RPCModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":35,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":44,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/RPCModule.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":82,"title":{},"body":{"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["auditservice",{"_index":45,"title":{"injectables/AuditService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuditService.html":{},"modules/RPCModule.html":{},"coverage.html":{},"overview.html":{}}}],["author",{"_index":673,"title":{},"body":{"properties.html":{}}}],["autoescape",{"_index":206,"title":{},"body":{"injectables/JinjaService.html":{}}}],["available",{"_index":664,"title":{},"body":{"modules.html":{}}}],["await",{"_index":144,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["bigint",{"_index":561,"title":{},"body":{"dependencies.html":{}}}],["body",{"_index":125,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{},"index.html":{}}}],["bodyarr",{"_index":156,"title":{},"body":{"controllers/I18nController.html":{}}}],["bodyarr.foreach(async",{"_index":160,"title":{},"body":{"controllers/I18nController.html":{}}}],["bodyarr.length",{"_index":158,"title":{},"body":{"controllers/I18nController.html":{}}}],["bodyi18n",{"_index":152,"title":{},"body":{"controllers/I18nController.html":{}}}],["boolean",{"_index":208,"title":{},"body":{"injectables/JinjaService.html":{}}}],["bootstrap",{"_index":528,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["break",{"_index":176,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["browse",{"_index":662,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":659,"title":{},"body":{"modules.html":{}}}],["can't",{"_index":266,"title":{},"body":{"controllers/LambdaController.html":{}}}],["case",{"_index":171,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["catch",{"_index":339,"title":{},"body":{"controllers/LambdaService.html":{},"controllers/TemplateController.html":{}}}],["catch((err",{"_index":427,"title":{},"body":{"injectables/TemplateService.html":{}}}],["class",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{}}}],["cloneddata",{"_index":489,"title":{},"body":{"injectables/TransformerService.html":{}}}],["cloneddata[field",{"_index":496,"title":{},"body":{"injectables/TransformerService.html":{}}}],["cloudbuild.googleapis.com",{"_index":618,"title":{},"body":{"index.html":{}}}],["cloudfunctions.googleapis.com",{"_index":617,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_exports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_singletonservicemodule",{"_index":373,"title":{},"body":{"modules/SingletonServiceModule.html":{}}}],["cluster_singletonservicemodule_exports",{"_index":374,"title":{},"body":{"modules/SingletonServiceModule.html":{}}}],["cluster_singletonservicemodule_providers",{"_index":375,"title":{},"body":{"modules/SingletonServiceModule.html":{}}}],["coming",{"_index":603,"title":{},"body":{"index.html":{}}}],["commenting",{"_index":623,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":645,"title":{},"body":{"index.html":{}}}],["compose",{"_index":638,"title":{},"body":{"index.html":{}}}],["config",{"_index":593,"title":{},"body":{"index.html":{}}}],["connected",{"_index":360,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console",{"_index":511,"title":{},"body":{"injectables/VMService.html":{}}}],["console.error",{"_index":265,"title":{},"body":{"controllers/LambdaController.html":{},"injectables/TemplateService.html":{}}}],["console.error(e",{"_index":341,"title":{},"body":{"controllers/LambdaService.html":{}}}],["console.log",{"_index":184,"title":{},"body":{"controllers/I18nController.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{}}}],["console.log('vm",{"_index":509,"title":{},"body":{"injectables/VMService.html":{}}}],["console.log(data",{"_index":306,"title":{},"body":{"controllers/LambdaService.html":{}}}],["consoleoutput",{"_index":322,"title":{},"body":{"controllers/LambdaService.html":{},"interfaces/RunFeedback.html":{},"controllers/TransformerController.html":{}}}],["consoleoutput.push(json.stringify(log",{"_index":328,"title":{},"body":{"controllers/LambdaService.html":{}}}],["const",{"_index":155,"title":{},"body":{"controllers/I18nController.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["constructor",{"_index":85,"title":{},"body":{"injectables/AppService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{}}}],["constructor(lambdaservice",{"_index":469,"title":{},"body":{"injectables/TransformerService.html":{}}}],["constructor(prisma",{"_index":86,"title":{},"body":{"injectables/AppService.html":{},"injectables/TemplateService.html":{}}}],["constructor(private",{"_index":96,"title":{},"body":{"injectables/AppService.html":{},"controllers/LambdaService.html":{},"modules/SingletonServiceModule.html":{},"injectables/TemplateService.html":{},"injectables/TransformerService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}},"body":{"controllers/AppController.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{},"coverage.html":{}}}],["controller('i18n",{"_index":136,"title":{},"body":{"controllers/I18nController.html":{}}}],["controller('lambda",{"_index":253,"title":{},"body":{"controllers/LambdaController.html":{}}}],["controller('transformer",{"_index":444,"title":{},"body":{"controllers/TransformerController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"modules/RPCModule.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{},"overview.html":{}}}],["core/audit/audit.service",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{}}}],["core/i18n/i18n/i18n.controller",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["core/lambda/lambda.controller",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{}}}],["core/lambda/lambda.service",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{}}}],["core/lambda/vm.service",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/SingletonServiceModule.html":{}}}],["core/template/template.controller",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{}}}],["core/template/template.service",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{}}}],["core/transformer/transformer.controller",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{}}}],["core/transformer/transformer.service",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{}}}],["cors",{"_index":556,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":516,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":426,"title":{},"body":{"injectables/TemplateService.html":{}}}],["createtemplate",{"_index":83,"title":{},"body":{"injectables/AppService.html":{},"injectables/TemplateService.html":{}}}],["createtemplate(data",{"_index":89,"title":{},"body":{"injectables/AppService.html":{},"injectables/TemplateService.html":{}}}],["crud",{"_index":588,"title":{},"body":{"index.html":{}}}],["cursor",{"_index":421,"title":{},"body":{"injectables/TemplateService.html":{}}}],["d",{"_index":640,"title":{},"body":{"index.html":{}}}],["data",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"index.html":{}}}],["data.field1",{"_index":627,"title":{},"body":{"index.html":{}}}],["data.field2",{"_index":629,"title":{},"body":{"index.html":{}}}],["data.lambda",{"_index":261,"title":{},"body":{"controllers/LambdaController.html":{}}}],["data.sample.data",{"_index":459,"title":{},"body":{"controllers/TransformerController.html":{}}}],["data.sample.path",{"_index":460,"title":{},"body":{"controllers/TransformerController.html":{}}}],["data.sampledata",{"_index":396,"title":{},"body":{"controllers/TemplateController.html":{}}}],["data.testdata",{"_index":262,"title":{},"body":{"controllers/LambdaController.html":{}}}],["data.transformer",{"_index":458,"title":{},"body":{"controllers/TransformerController.html":{}}}],["data.transformer.type",{"_index":457,"title":{},"body":{"controllers/TransformerController.html":{}}}],["data.type",{"_index":397,"title":{},"body":{"controllers/TemplateController.html":{}}}],["data.username",{"_index":615,"title":{},"body":{"index.html":{}}}],["database",{"_index":634,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["default",{"_index":106,"title":{},"body":{"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"injectables/PrismaService.html":{},"controllers/TemplateController.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{}}}],["delete",{"_index":126,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["delete('/:id",{"_index":242,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["deletetemplate",{"_index":236,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{}}}],["deletetemplate(@param('id",{"_index":269,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["deletetemplate(id",{"_index":241,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["deletetemplate(where",{"_index":408,"title":{},"body":{"injectables/TemplateService.html":{}}}],["dependencies",{"_index":37,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/SingletonServiceModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":585,"title":{},"body":{"index.html":{},"properties.html":{}}}],["dev",{"_index":613,"title":{},"body":{"index.html":{}}}],["did.split",{"_index":301,"title":{},"body":{"controllers/LambdaService.html":{}}}],["did:internal:1",{"_index":297,"title":{},"body":{"controllers/LambdaService.html":{}}}],["didparts",{"_index":300,"title":{},"body":{"controllers/LambdaService.html":{}}}],["didparts[didparts.length",{"_index":302,"title":{},"body":{"controllers/LambdaService.html":{}}}],["docker",{"_index":637,"title":{},"body":{"index.html":{}}}],["docs",{"_index":622,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":517,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":655,"title":{},"body":{"index.html":{}}}],["done",{"_index":643,"title":{},"body":{"index.html":{}}}],["dto/render",{"_index":132,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["e",{"_index":340,"title":{},"body":{"controllers/LambdaService.html":{},"controllers/TemplateController.html":{}}}],["e.message",{"_index":342,"title":{},"body":{"controllers/LambdaService.html":{}}}],["ejs",{"_index":105,"title":{},"body":{"injectables/EjsService.html":{},"dependencies.html":{}}}],["ejsservice",{"_index":46,"title":{"injectables/EjsService.html":{}},"body":{"modules/AppModule.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"modules/RPCModule.html":{},"controllers/TemplateController.html":{},"coverage.html":{},"overview.html":{}}}],["element",{"_index":161,"title":{},"body":{"controllers/I18nController.html":{}}}],["element.lang",{"_index":185,"title":{},"body":{"controllers/I18nController.html":{}}}],["enableshutdownhooks",{"_index":347,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":349,"title":{},"body":{"injectables/PrismaService.html":{}}}],["endtime",{"_index":337,"title":{},"body":{"controllers/LambdaService.html":{}}}],["engine",{"_index":102,"title":{},"body":{"injectables/EjsService.html":{}}}],["engines/ejs/ejs.service",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{}}}],["engines/jinja/jinja.service",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{}}}],["enum",{"_index":616,"title":{},"body":{"index.html":{}}}],["err",{"_index":187,"title":{},"body":{"controllers/I18nController.html":{},"injectables/TemplateService.html":{}}}],["err.message",{"_index":428,"title":{},"body":{"injectables/TemplateService.html":{}}}],["error",{"_index":316,"title":{},"body":{"controllers/LambdaService.html":{},"interfaces/RunFeedback.html":{},"controllers/TransformerController.html":{}}}],["error('lambda",{"_index":504,"title":{},"body":{"injectables/TransformerService.html":{}}}],["example",{"_index":296,"title":{},"body":{"controllers/LambdaService.html":{}}}],["executiontimeinms",{"_index":321,"title":{},"body":{"controllers/LambdaService.html":{},"interfaces/RunFeedback.html":{},"controllers/TransformerController.html":{}}}],["existing",{"_index":363,"title":{},"body":{"injectables/PrismaService.html":{}}}],["export",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{}}}],["exports",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/SingletonServiceModule.html":{}}}],["express",{"_index":547,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":344,"title":{},"body":{"injectables/PrismaService.html":{}}}],["external",{"_index":514,"title":{},"body":{"injectables/VMService.html":{}}}],["f1",{"_index":625,"title":{},"body":{"index.html":{}}}],["f2",{"_index":626,"title":{},"body":{"index.html":{}}}],["failed",{"_index":268,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TransformerController.html":{}}}],["fallback",{"_index":111,"title":{},"body":{"injectables/EjsService.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{}}}],["false",{"_index":515,"title":{},"body":{"injectables/VMService.html":{}}}],["fastify",{"_index":548,"title":{},"body":{"dependencies.html":{}}}],["feel",{"_index":590,"title":{},"body":{"index.html":{}}}],["field",{"_index":487,"title":{},"body":{"injectables/TransformerService.html":{}}}],["field1",{"_index":624,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{},"coverage.html":{}}}],["find",{"_index":295,"title":{},"body":{"controllers/LambdaService.html":{}}}],["fix",{"_index":483,"title":{},"body":{"injectables/TransformerService.html":{}}}],["found",{"_index":188,"title":{},"body":{"controllers/I18nController.html":{},"injectables/TransformerService.html":{}}}],["free",{"_index":591,"title":{},"body":{"index.html":{}}}],["function",{"_index":317,"title":{},"body":{"controllers/LambdaService.html":{},"coverage.html":{},"index.html":{}}}],["function(data",{"_index":309,"title":{},"body":{"controllers/LambdaService.html":{}}}],["function\\s*\\(([^)]*)\\)\\s",{"_index":311,"title":{},"body":{"controllers/LambdaService.html":{}}}],["functiondid",{"_index":498,"title":{},"body":{"injectables/TransformerService.html":{}}}],["functioninsandbox",{"_index":334,"title":{},"body":{"controllers/LambdaService.html":{}}}],["functioninsandbox(data",{"_index":336,"title":{},"body":{"controllers/LambdaService.html":{}}}],["functions",{"_index":581,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":217,"title":{},"body":{"injectables/JsTLService.html":{}}}],["generating",{"_index":642,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":245,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["getalltemplates",{"_index":84,"title":{},"body":{"injectables/AppService.html":{}}}],["getlambdafromdid",{"_index":274,"title":{},"body":{"controllers/LambdaService.html":{}}}],["getlambdafromdid(did",{"_index":277,"title":{},"body":{"controllers/LambdaService.html":{}}}],["getobjpath",{"_index":210,"title":{},"body":{"injectables/JsTLService.html":{}}}],["getstudent",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["getstudent(data",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["gettemplate",{"_index":237,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["gettemplate(@param('id",{"_index":272,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["gettemplate(id",{"_index":244,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["getting",{"_index":583,"title":{"index.html":{}},"body":{}}],["google",{"_index":565,"title":{},"body":{"dependencies.html":{}}}],["gql",{"_index":635,"title":{},"body":{"index.html":{}}}],["graph",{"_index":663,"title":{},"body":{"modules.html":{}}}],["grpc",{"_index":649,"title":{},"body":{"index.html":{}}}],["grpc/grpc",{"_index":532,"title":{},"body":{"dependencies.html":{}}}],["grpc/proto",{"_index":535,"title":{},"body":{"dependencies.html":{}}}],["grpcmethod",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{}}}],["grpcmethod('lambdaservice",{"_index":282,"title":{},"body":{"controllers/LambdaService.html":{}}}],["grpcmethod('studentcontroller",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["hello",{"_index":631,"title":{},"body":{"index.html":{}}}],["i18n",{"_index":115,"title":{},"body":{"controllers/I18nController.html":{}}}],["i18ncontroller",{"_index":61,"title":{"controllers/I18nController.html":{}},"body":{"modules/AppModule.html":{},"controllers/I18nController.html":{},"coverage.html":{}}}],["id",{"_index":146,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["identifier",{"_index":518,"title":{},"body":{"coverage.html":{}}}],["implemented",{"_index":452,"title":{},"body":{"controllers/TransformerController.html":{}}}],["implements",{"_index":357,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/VMService.html":{}}}],["import",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{}}}],["imports",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{},"modules/SingletonServiceModule.html":{}}}],["include",{"_index":148,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["inestapplication",{"_index":350,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{}}}],["initialized",{"_index":510,"title":{},"body":{"injectables/VMService.html":{}}}],["injectable",{"_index":79,"title":{"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"injectables/PrismaService.html":{},"injectables/TemplateService.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"injectables/TemplateService.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{},"coverage.html":{}}}],["injectables",{"_index":80,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"injectables/PrismaService.html":{},"injectables/TemplateService.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{},"overview.html":{}}}],["installation",{"_index":595,"title":{},"body":{"index.html":{}}}],["installtemplating",{"_index":597,"title":{},"body":{"index.html":{}}}],["interface",{"_index":368,"title":{"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{}},"body":{"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"coverage.html":{}}}],["interfaces",{"_index":251,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"overview.html":{}}}],["interpolate",{"_index":211,"title":{},"body":{"injectables/JsTLService.html":{}}}],["invalid",{"_index":319,"title":{},"body":{"controllers/LambdaService.html":{}}}],["javascript",{"_index":600,"title":{},"body":{"index.html":{}}}],["jinja",{"_index":602,"title":{},"body":{"index.html":{}}}],["jinjaservice",{"_index":47,"title":{"injectables/JinjaService.html":{}},"body":{"modules/AppModule.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"modules/RPCModule.html":{},"controllers/TemplateController.html":{},"coverage.html":{},"overview.html":{}}}],["js",{"_index":533,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":560,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["json.parse(data.sampledata",{"_index":395,"title":{},"body":{"controllers/TemplateController.html":{}}}],["json.parse(json.stringify(data",{"_index":490,"title":{},"body":{"injectables/TransformerService.html":{}}}],["json.parse(lambda.testdata",{"_index":304,"title":{},"body":{"controllers/LambdaService.html":{}}}],["json.stringify(data.sample.response",{"_index":462,"title":{},"body":{"controllers/TransformerController.html":{}}}],["json.stringify(result",{"_index":461,"title":{},"body":{"controllers/TransformerController.html":{}}}],["jstl",{"_index":606,"title":{},"body":{"index.html":{}}}],["jstlservice",{"_index":48,"title":{"injectables/JsTLService.html":{}},"body":{"modules/AppModule.html":{},"controllers/I18nController.html":{},"injectables/JsTLService.html":{},"modules/RPCModule.html":{},"controllers/TemplateController.html":{},"coverage.html":{},"overview.html":{}}}],["jwt",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["key",{"_index":230,"title":{},"body":{"injectables/JsTLService.html":{},"injectables/TransformerService.html":{},"index.html":{}}}],["lambda",{"_index":234,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["lambda.body",{"_index":331,"title":{},"body":{"controllers/LambdaService.html":{}}}],["lambda.language",{"_index":329,"title":{},"body":{"controllers/LambdaService.html":{}}}],["lambda.service",{"_index":252,"title":{},"body":{"controllers/LambdaController.html":{}}}],["lambda/lambda.service",{"_index":478,"title":{},"body":{"injectables/TransformerService.html":{}}}],["lambdacontroller",{"_index":57,"title":{"controllers/LambdaController.html":{}},"body":{"modules/AppModule.html":{},"controllers/LambdaController.html":{},"modules/RPCModule.html":{},"coverage.html":{}}}],["lambdajustbody",{"_index":249,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"interfaces/RunFeedback.html":{},"miscellaneous/typealiases.html":{}}}],["lambdarunfeedback",{"_index":453,"title":{},"body":{"controllers/TransformerController.html":{}}}],["lambdaservice",{"_index":60,"title":{"controllers/LambdaService.html":{}},"body":{"modules/AppModule.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"modules/RPCModule.html":{},"injectables/TransformerService.html":{},"coverage.html":{}}}],["lang",{"_index":154,"title":{},"body":{"controllers/I18nController.html":{}}}],["language",{"_index":284,"title":{},"body":{"controllers/LambdaService.html":{},"interfaces/RunFeedback.html":{}}}],["language.typescript",{"_index":330,"title":{},"body":{"controllers/LambdaService.html":{}}}],["languages",{"_index":598,"title":{},"body":{"index.html":{}}}],["last",{"_index":298,"title":{},"body":{"controllers/LambdaService.html":{}}}],["license",{"_index":671,"title":{},"body":{"properties.html":{}}}],["literal",{"_index":239,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"miscellaneous/typealiases.html":{}}}],["literals",{"_index":601,"title":{},"body":{"index.html":{}}}],["loader",{"_index":536,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":327,"title":{},"body":{"controllers/LambdaService.html":{}}}],["logger",{"_index":346,"title":{},"body":{"injectables/PrismaService.html":{}}}],["logger(prismaservice.name",{"_index":355,"title":{},"body":{"injectables/PrismaService.html":{}}}],["manager",{"_index":594,"title":{},"body":{"index.html":{}}}],["match",{"_index":219,"title":{},"body":{"injectables/JsTLService.html":{},"controllers/LambdaService.html":{}}}],["match.slice(2",{"_index":221,"title":{},"body":{"injectables/JsTLService.html":{}}}],["matching",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["meta",{"_index":195,"title":{},"body":{"controllers/I18nController.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{},"injectables/TransformerService.html":{},"index.html":{}}}],["metadata",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{}}}],["migrate",{"_index":612,"title":{},"body":{"index.html":{}}}],["migrations",{"_index":608,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":580,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["module",{"_index":34,"title":{"modules/AppModule.html":{},"modules/RPCModule.html":{},"modules/SingletonServiceModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{},"modules/SingletonServiceModule.html":{}}}],["module.exports",{"_index":333,"title":{},"body":{"controllers/LambdaService.html":{}}}],["modules",{"_index":36,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{},"modules/SingletonServiceModule.html":{},"modules.html":{},"overview.html":{}}}],["name",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["nested",{"_index":226,"title":{},"body":{"injectables/JsTLService.html":{}}}],["nestjs/common",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":539,"title":{},"body":{"dependencies.html":{}}}],["nestjs/core",{"_index":541,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":542,"title":{},"body":{"dependencies.html":{}}}],["nestjs/microservices",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":544,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":546,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":550,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":354,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{},"coverage.html":{}}}],["nodevm",{"_index":285,"title":{},"body":{"controllers/LambdaService.html":{},"injectables/VMService.html":{}}}],["notes",{"_index":619,"title":{},"body":{"index.html":{}}}],["now",{"_index":653,"title":{},"body":{"index.html":{}}}],["npx",{"_index":644,"title":{},"body":{"index.html":{}}}],["null",{"_index":143,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaService.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{}}}],["number",{"_index":370,"title":{},"body":{"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"injectables/TemplateService.html":{}}}],["number(id",{"_index":271,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["number(renderdto.id",{"_index":255,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TransformerController.html":{}}}],["nunjucks",{"_index":198,"title":{},"body":{"injectables/JinjaService.html":{},"dependencies.html":{}}}],["o.key",{"_index":495,"title":{},"body":{"injectables/TransformerService.html":{}}}],["oauth20",{"_index":566,"title":{},"body":{"dependencies.html":{}}}],["obj",{"_index":228,"title":{},"body":{"injectables/JsTLService.html":{}}}],["object",{"_index":227,"title":{},"body":{"injectables/JsTLService.html":{}}}],["ok",{"_index":338,"title":{},"body":{"controllers/LambdaService.html":{}}}],["onmoduleinit",{"_index":348,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/VMService.html":{}}}],["option",{"_index":493,"title":{},"body":{"injectables/TransformerService.html":{}}}],["option.value",{"_index":497,"title":{},"body":{"injectables/TransformerService.html":{}}}],["optional",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["options",{"_index":485,"title":{},"body":{"injectables/TransformerService.html":{},"index.html":{}}}],["options.find((o",{"_index":494,"title":{},"body":{"injectables/TransformerService.html":{}}}],["orderby",{"_index":423,"title":{},"body":{"injectables/TemplateService.html":{}}}],["original",{"_index":488,"title":{},"body":{"injectables/TransformerService.html":{}}}],["out",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/SingletonServiceModule.html":{},"overview.html":{}}}],["overview",{"_index":665,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":646,"title":{},"body":{"index.html":{}}}],["package",{"_index":531,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":127,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["parameters",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["params",{"_index":416,"title":{},"body":{"injectables/TemplateService.html":{}}}],["part",{"_index":299,"title":{},"body":{"controllers/LambdaService.html":{}}}],["passport",{"_index":564,"title":{},"body":{"dependencies.html":{}}}],["path",{"_index":220,"title":{},"body":{"injectables/JsTLService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"injectables/TransformerService.html":{},"index.html":{}}}],["path.split('.').pop",{"_index":491,"title":{},"body":{"injectables/TransformerService.html":{}}}],["path.split('.').reduce((res",{"_index":229,"title":{},"body":{"injectables/JsTLService.html":{}}}],["perf_hooks",{"_index":289,"title":{},"body":{"controllers/LambdaService.html":{}}}],["performance",{"_index":288,"title":{},"body":{"controllers/LambdaService.html":{}}}],["performance.now",{"_index":325,"title":{},"body":{"controllers/LambdaService.html":{}}}],["post",{"_index":118,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["post('/process",{"_index":247,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["post('/process/test",{"_index":385,"title":{},"body":{"controllers/TemplateController.html":{}}}],["post('/process/testmany",{"_index":388,"title":{},"body":{"controllers/TemplateController.html":{}}}],["post('/test",{"_index":439,"title":{},"body":{"controllers/TransformerController.html":{}}}],["post('process",{"_index":123,"title":{},"body":{"controllers/I18nController.html":{}}}],["postman",{"_index":650,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":114,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["prisma",{"_index":88,"title":{},"body":{"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"dependencies.html":{},"index.html":{}}}],["prisma.lambdacreateinput",{"_index":257,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/LambdaService.html":{}}}],["prisma.service",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"modules/RPCModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{}}}],["prisma.templatecreateinput",{"_index":90,"title":{},"body":{"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{}}}],["prisma.templateorderbywithrelationinput",{"_index":424,"title":{},"body":{"injectables/TemplateService.html":{}}}],["prisma.templateupdateinput",{"_index":429,"title":{},"body":{"injectables/TemplateService.html":{}}}],["prisma.templatewhereinput",{"_index":422,"title":{},"body":{"injectables/TemplateService.html":{}}}],["prisma.templatewhereuniqueinput",{"_index":409,"title":{},"body":{"injectables/TemplateService.html":{}}}],["prisma.transformercreateinput",{"_index":433,"title":{},"body":{"controllers/TransformerController.html":{}}}],["prisma/client",{"_index":95,"title":{},"body":{"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":345,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaservice",{"_index":49,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":137,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["proc",{"_index":168,"title":{},"body":{"controllers/I18nController.html":{}}}],["process",{"_index":275,"title":{},"body":{"controllers/LambdaService.html":{},"injectables/TransformerService.html":{}}}],["process(lambda",{"_index":279,"title":{},"body":{"controllers/LambdaService.html":{}}}],["process(transformer",{"_index":471,"title":{},"body":{"injectables/TransformerService.html":{}}}],["processed",{"_index":141,"title":{},"body":{"controllers/I18nController.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{}}}],["processed.push",{"_index":186,"title":{},"body":{"controllers/I18nController.html":{}}}],["processinternalfunction",{"_index":467,"title":{},"body":{"injectables/TransformerService.html":{}}}],["processinternalfunction(transformerconfig",{"_index":473,"title":{},"body":{"injectables/TransformerService.html":{}}}],["processoptions",{"_index":468,"title":{},"body":{"injectables/TransformerService.html":{}}}],["processoptions(transformerconfig",{"_index":476,"title":{},"body":{"injectables/TransformerService.html":{}}}],["processrpc",{"_index":276,"title":{},"body":{"controllers/LambdaService.html":{}}}],["processrpc(lambda",{"_index":281,"title":{},"body":{"controllers/LambdaService.html":{}}}],["promise",{"_index":92,"title":{},"body":{"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["properties",{"_index":101,"title":{"properties.html":{}},"body":{"injectables/EjsService.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"injectables/PrismaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"injectables/VMService.html":{},"properties.html":{}}}],["property",{"_index":225,"title":{},"body":{"injectables/JsTLService.html":{}}}],["providers",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{},"modules/SingletonServiceModule.html":{}}}],["public",{"_index":620,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":138,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"injectables/PrismaService.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["redirect",{"_index":512,"title":{},"body":{"injectables/VMService.html":{}}}],["reflect",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["regex",{"_index":216,"title":{},"body":{"injectables/JsTLService.html":{},"controllers/LambdaService.html":{}}}],["regex.exec(lambda.body",{"_index":312,"title":{},"body":{"controllers/LambdaService.html":{}}}],["render",{"_index":103,"title":{},"body":{"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["render(@body",{"_index":140,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["render(renderdto",{"_index":121,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["render(substitute",{"_index":589,"title":{},"body":{"index.html":{}}}],["renderdto",{"_index":122,"title":{"interfaces/RenderDto.html":{}},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{},"coverage.html":{}}}],["renderdto.data",{"_index":163,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["renderdto.data.lang",{"_index":142,"title":{},"body":{"controllers/I18nController.html":{}}}],["renderdto.data.type",{"_index":189,"title":{},"body":{"controllers/I18nController.html":{}}}],["renderdto.id",{"_index":147,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["renderdto.path",{"_index":449,"title":{},"body":{"controllers/TransformerController.html":{}}}],["renderdtotest",{"_index":130,"title":{"interfaces/RenderDtoTest.html":{}},"body":{"controllers/I18nController.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{},"coverage.html":{}}}],["renderresponse",{"_index":131,"title":{"interfaces/RenderResponse.html":{}},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{},"coverage.html":{}}}],["rendertest",{"_index":378,"title":{},"body":{"controllers/TemplateController.html":{}}}],["rendertest(@body",{"_index":394,"title":{},"body":{"controllers/TemplateController.html":{}}}],["rendertest(data",{"_index":384,"title":{},"body":{"controllers/TemplateController.html":{}}}],["rendertestmany",{"_index":379,"title":{},"body":{"controllers/TemplateController.html":{}}}],["rendertestmany(@body",{"_index":401,"title":{},"body":{"controllers/TemplateController.html":{}}}],["rendertestmany(data",{"_index":387,"title":{},"body":{"controllers/TemplateController.html":{}}}],["replace",{"_index":486,"title":{},"body":{"injectables/TransformerService.html":{}}}],["requests",{"_index":652,"title":{},"body":{"index.html":{}}}],["require",{"_index":513,"title":{},"body":{"injectables/VMService.html":{}}}],["require('nunjucks",{"_index":204,"title":{},"body":{"injectables/JinjaService.html":{}}}],["require('typescript",{"_index":291,"title":{},"body":{"controllers/LambdaService.html":{}}}],["res[key",{"_index":231,"title":{},"body":{"injectables/JsTLService.html":{}}}],["reset",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/SingletonServiceModule.html":{},"overview.html":{}}}],["response",{"_index":305,"title":{},"body":{"controllers/LambdaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"controllers/TransformerController.html":{}}}],["result",{"_index":307,"title":{},"body":{"controllers/LambdaService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["result.response",{"_index":503,"title":{},"body":{"injectables/TransformerService.html":{}}}],["result.statuscode",{"_index":502,"title":{},"body":{"injectables/TransformerService.html":{}}}],["results",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["returns",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{}}}],["rimraf",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["rpcmodule",{"_index":365,"title":{"modules/RPCModule.html":{}},"body":{"modules/RPCModule.html":{},"modules.html":{}}}],["run",{"_index":499,"title":{},"body":{"injectables/TransformerService.html":{},"index.html":{}}}],["runfeedback",{"_index":250,"title":{"interfaces/RunFeedback.html":{}},"body":{"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"interfaces/RunFeedback.html":{},"controllers/TransformerController.html":{},"coverage.html":{}}}],["running",{"_index":607,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":648,"title":{},"body":{"index.html":{}}}],["sample",{"_index":456,"title":{},"body":{"controllers/TransformerController.html":{}}}],["sampledata",{"_index":371,"title":{"interfaces/SampleData.html":{}},"body":{"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"coverage.html":{},"index.html":{}}}],["schema",{"_index":610,"title":{},"body":{"index.html":{}}}],["schema.prisma",{"_index":611,"title":{},"body":{"index.html":{}}}],["select",{"_index":153,"title":{},"body":{"controllers/I18nController.html":{}}}],["send",{"_index":651,"title":{},"body":{"index.html":{}}}],["server",{"_index":636,"title":{},"body":{"index.html":{}}}],["service",{"_index":586,"title":{},"body":{"index.html":{}}}],["setup",{"_index":633,"title":{},"body":{"index.html":{}}}],["share",{"_index":657,"title":{},"body":{"index.html":{}}}],["signature",{"_index":310,"title":{},"body":{"controllers/LambdaService.html":{}}}],["singletonservice.module",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["singletonservicemodule",{"_index":42,"title":{"modules/SingletonServiceModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SingletonServiceModule.html":{},"modules.html":{},"overview.html":{}}}],["skip",{"_index":419,"title":{},"body":{"injectables/TemplateService.html":{}}}],["soon",{"_index":604,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{}}}],["spec",{"_index":614,"title":{},"body":{"index.html":{}}}],["specified",{"_index":224,"title":{},"body":{"injectables/JsTLService.html":{}}}],["src/.../interfaces.ts",{"_index":676,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":582,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:8",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":81,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:10",{"_index":93,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:14",{"_index":91,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:7",{"_index":87,"title":{},"body":{"injectables/AppService.html":{}}}],["src/core/audit/audit.service.ts",{"_index":99,"title":{},"body":{"injectables/AuditService.html":{},"coverage.html":{}}}],["src/core/dto/render.ts",{"_index":369,"title":{},"body":{"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"coverage.html":{}}}],["src/core/i18n/i18n/i18n.controller.ts",{"_index":113,"title":{},"body":{"controllers/I18nController.html":{},"coverage.html":{}}}],["src/core/i18n/i18n/i18n.controller.ts:23",{"_index":119,"title":{},"body":{"controllers/I18nController.html":{}}}],["src/core/i18n/i18n/i18n.controller.ts:30",{"_index":124,"title":{},"body":{"controllers/I18nController.html":{}}}],["src/core/lambda/interfaces",{"_index":442,"title":{},"body":{"controllers/TransformerController.html":{}}}],["src/core/lambda/interfaces.ts",{"_index":372,"title":{},"body":{"interfaces/RunFeedback.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/lambda/lambda.controller.ts",{"_index":233,"title":{},"body":{"controllers/LambdaController.html":{},"coverage.html":{}}}],["src/core/lambda/lambda.controller.ts:17",{"_index":248,"title":{},"body":{"controllers/LambdaController.html":{}}}],["src/core/lambda/lambda.controller.ts:26",{"_index":240,"title":{},"body":{"controllers/LambdaController.html":{}}}],["src/core/lambda/lambda.controller.ts:47",{"_index":243,"title":{},"body":{"controllers/LambdaController.html":{}}}],["src/core/lambda/lambda.controller.ts:52",{"_index":246,"title":{},"body":{"controllers/LambdaController.html":{}}}],["src/core/lambda/lambda.service.ts",{"_index":273,"title":{},"body":{"controllers/LambdaService.html":{},"coverage.html":{}}}],["src/core/lambda/lambda.service.ts:19",{"_index":278,"title":{},"body":{"controllers/LambdaService.html":{}}}],["src/core/lambda/lambda.service.ts:28",{"_index":283,"title":{},"body":{"controllers/LambdaService.html":{}}}],["src/core/lambda/lambda.service.ts:41",{"_index":280,"title":{},"body":{"controllers/LambdaService.html":{}}}],["src/core/lambda/vm.service.ts",{"_index":505,"title":{},"body":{"injectables/VMService.html":{},"coverage.html":{}}}],["src/core/lambda/vm.service.ts:16",{"_index":507,"title":{},"body":{"injectables/VMService.html":{}}}],["src/core/lambda/vm.service.ts:6",{"_index":506,"title":{},"body":{"injectables/VMService.html":{}}}],["src/core/template/template.controller.ts",{"_index":377,"title":{},"body":{"controllers/TemplateController.html":{},"coverage.html":{}}}],["src/core/template/template.controller.ts:106",{"_index":389,"title":{},"body":{"controllers/TemplateController.html":{}}}],["src/core/template/template.controller.ts:149",{"_index":380,"title":{},"body":{"controllers/TemplateController.html":{}}}],["src/core/template/template.controller.ts:156",{"_index":381,"title":{},"body":{"controllers/TemplateController.html":{}}}],["src/core/template/template.controller.ts:161",{"_index":382,"title":{},"body":{"controllers/TemplateController.html":{}}}],["src/core/template/template.controller.ts:23",{"_index":383,"title":{},"body":{"controllers/TemplateController.html":{}}}],["src/core/template/template.controller.ts:68",{"_index":386,"title":{},"body":{"controllers/TemplateController.html":{}}}],["src/core/template/template.service.ts",{"_index":404,"title":{},"body":{"injectables/TemplateService.html":{},"coverage.html":{}}}],["src/core/template/template.service.ts:20",{"_index":415,"title":{},"body":{"injectables/TemplateService.html":{}}}],["src/core/template/template.service.ts:37",{"_index":407,"title":{},"body":{"injectables/TemplateService.html":{}}}],["src/core/template/template.service.ts:48",{"_index":418,"title":{},"body":{"injectables/TemplateService.html":{}}}],["src/core/template/template.service.ts:59",{"_index":410,"title":{},"body":{"injectables/TemplateService.html":{}}}],["src/core/template/template.service.ts:6",{"_index":406,"title":{},"body":{"injectables/TemplateService.html":{}}}],["src/core/template/template.service.ts:9",{"_index":412,"title":{},"body":{"injectables/TemplateService.html":{}}}],["src/core/transformer/transformer.controller.ts",{"_index":432,"title":{},"body":{"controllers/TransformerController.html":{},"coverage.html":{}}}],["src/core/transformer/transformer.controller.ts:108",{"_index":434,"title":{},"body":{"controllers/TransformerController.html":{}}}],["src/core/transformer/transformer.controller.ts:117",{"_index":435,"title":{},"body":{"controllers/TransformerController.html":{}}}],["src/core/transformer/transformer.controller.ts:122",{"_index":436,"title":{},"body":{"controllers/TransformerController.html":{}}}],["src/core/transformer/transformer.controller.ts:16",{"_index":437,"title":{},"body":{"controllers/TransformerController.html":{}}}],["src/core/transformer/transformer.controller.ts:55",{"_index":440,"title":{},"body":{"controllers/TransformerController.html":{}}}],["src/core/transformer/transformer.service.ts",{"_index":466,"title":{},"body":{"injectables/TransformerService.html":{},"coverage.html":{}}}],["src/core/transformer/transformer.service.ts:10",{"_index":472,"title":{},"body":{"injectables/TransformerService.html":{}}}],["src/core/transformer/transformer.service.ts:24",{"_index":477,"title":{},"body":{"injectables/TransformerService.html":{}}}],["src/core/transformer/transformer.service.ts:44",{"_index":474,"title":{},"body":{"injectables/TransformerService.html":{}}}],["src/core/transformer/transformer.service.ts:7",{"_index":470,"title":{},"body":{"injectables/TransformerService.html":{}}}],["src/engines/ejs/ejs.service",{"_index":135,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["src/engines/ejs/ejs.service.ts",{"_index":100,"title":{},"body":{"injectables/EjsService.html":{},"coverage.html":{}}}],["src/engines/ejs/ejs.service.ts:6",{"_index":104,"title":{},"body":{"injectables/EjsService.html":{}}}],["src/engines/ejs/ejs.service.ts:9",{"_index":108,"title":{},"body":{"injectables/EjsService.html":{}}}],["src/engines/jinja/jinja.service",{"_index":134,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["src/engines/jinja/jinja.service.ts",{"_index":197,"title":{},"body":{"injectables/JinjaService.html":{},"coverage.html":{}}}],["src/engines/jinja/jinja.service.ts:12",{"_index":201,"title":{},"body":{"injectables/JinjaService.html":{}}}],["src/engines/jinja/jinja.service.ts:16",{"_index":202,"title":{},"body":{"injectables/JinjaService.html":{}}}],["src/engines/jinja/jinja.service.ts:5",{"_index":200,"title":{},"body":{"injectables/JinjaService.html":{}}}],["src/engines/jstl/jstl.service",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"controllers/I18nController.html":{},"modules/RPCModule.html":{},"controllers/TemplateController.html":{}}}],["src/engines/jstl/jstl.service.ts",{"_index":209,"title":{},"body":{"injectables/JsTLService.html":{},"coverage.html":{}}}],["src/engines/jstl/jstl.service.ts:15",{"_index":212,"title":{},"body":{"injectables/JsTLService.html":{}}}],["src/engines/jstl/jstl.service.ts:19",{"_index":214,"title":{},"body":{"injectables/JsTLService.html":{}}}],["src/engines/jstl/jstl.service.ts:5",{"_index":213,"title":{},"body":{"injectables/JsTLService.html":{}}}],["src/main.ts",{"_index":527,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma.service.ts",{"_index":343,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma.service.ts:12",{"_index":356,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma.service.ts:13",{"_index":353,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma.service.ts:18",{"_index":351,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/rpc.module.ts",{"_index":366,"title":{},"body":{"modules/RPCModule.html":{}}}],["src/singletonservice.module.ts",{"_index":376,"title":{},"body":{"modules/SingletonServiceModule.html":{}}}],["start",{"_index":320,"title":{},"body":{"controllers/LambdaService.html":{},"index.html":{}}}],["started",{"_index":584,"title":{"index.html":{}},"body":{}}],["starttime",{"_index":324,"title":{},"body":{"controllers/LambdaService.html":{}}}],["statements",{"_index":519,"title":{},"body":{"coverage.html":{}}}],["statuscode",{"_index":313,"title":{},"body":{"controllers/LambdaService.html":{},"interfaces/RunFeedback.html":{},"controllers/TransformerController.html":{}}}],["statusmessage",{"_index":315,"title":{},"body":{"controllers/LambdaService.html":{},"interfaces/RunFeedback.html":{},"controllers/TransformerController.html":{}}}],["string",{"_index":110,"title":{},"body":{"injectables/EjsService.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["success",{"_index":455,"title":{},"body":{"controllers/TransformerController.html":{}}}],["successful",{"_index":463,"title":{},"body":{"controllers/TransformerController.html":{}}}],["support",{"_index":660,"title":{},"body":{"modules.html":{}}}],["supported",{"_index":599,"title":{},"body":{"index.html":{}}}],["svg",{"_index":661,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":558,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["switch",{"_index":169,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["table",{"_index":530,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":529,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":420,"title":{},"body":{"injectables/TemplateService.html":{}}}],["template",{"_index":94,"title":{},"body":{"injectables/AppService.html":{},"controllers/I18nController.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"index.html":{}}}],["template(userwhereuniqueinput",{"_index":411,"title":{},"body":{"injectables/TemplateService.html":{}}}],["template.bodyi18n",{"_index":157,"title":{},"body":{"controllers/I18nController.html":{}}}],["template.bodyi18n[0].body",{"_index":191,"title":{},"body":{"controllers/I18nController.html":{}}}],["template.meta",{"_index":196,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["template.replace(regex",{"_index":218,"title":{},"body":{"injectables/JsTLService.html":{}}}],["template.service",{"_index":390,"title":{},"body":{"controllers/TemplateController.html":{}}}],["template.transformers",{"_index":164,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["template.type",{"_index":170,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["template/template.service",{"_index":133,"title":{},"body":{"controllers/I18nController.html":{}}}],["templatecontroller",{"_index":59,"title":{"controllers/TemplateController.html":{}},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{},"controllers/TemplateController.html":{},"coverage.html":{}}}],["templatedata",{"_index":120,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["templaterdb",{"_index":641,"title":{},"body":{"index.html":{}}}],["templates",{"_index":180,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"index.html":{}}}],["templates(params",{"_index":414,"title":{},"body":{"injectables/TemplateService.html":{}}}],["templateservice",{"_index":50,"title":{"injectables/TemplateService.html":{}},"body":{"modules/AppModule.html":{},"controllers/I18nController.html":{},"modules/RPCModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"coverage.html":{},"overview.html":{}}}],["templatetext",{"_index":109,"title":{},"body":{"injectables/EjsService.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{}}}],["templatetype",{"_index":128,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{},"index.html":{}}}],["templatetype.ejs",{"_index":177,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["templatetype.jinja",{"_index":172,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["templatetype.js_template_literals",{"_index":174,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["test",{"_index":194,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{},"index.html":{}}}],["test(data",{"_index":438,"title":{},"body":{"controllers/TransformerController.html":{}}}],["testdata",{"_index":258,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/LambdaService.html":{}}}],["testdataprocessresult",{"_index":259,"title":{},"body":{"controllers/LambdaController.html":{}}}],["testdataprocessresult.statuscode",{"_index":263,"title":{},"body":{"controllers/LambdaController.html":{}}}],["this.$connect",{"_index":358,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":361,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.ejsservice.render",{"_index":193,"title":{},"body":{"controllers/I18nController.html":{}}}],["this.ejsservice.render(data.body",{"_index":400,"title":{},"body":{"controllers/TemplateController.html":{}}}],["this.ejsservice.render(element.body",{"_index":178,"title":{},"body":{"controllers/I18nController.html":{}}}],["this.ejsservice.render(template.body",{"_index":393,"title":{},"body":{"controllers/TemplateController.html":{}}}],["this.engine.render(templatetext",{"_index":112,"title":{},"body":{"injectables/EjsService.html":{}}}],["this.getobjpath(path",{"_index":223,"title":{},"body":{"injectables/JsTLService.html":{}}}],["this.interpolate(templatetext",{"_index":232,"title":{},"body":{"injectables/JsTLService.html":{}}}],["this.jinjaservice.render",{"_index":190,"title":{},"body":{"controllers/I18nController.html":{}}}],["this.jinjaservice.render(data.body",{"_index":398,"title":{},"body":{"controllers/TemplateController.html":{}}}],["this.jinjaservice.render(element.body",{"_index":173,"title":{},"body":{"controllers/I18nController.html":{}}}],["this.jinjaservice.render(template.body",{"_index":391,"title":{},"body":{"controllers/TemplateController.html":{}}}],["this.jstlservice.render",{"_index":192,"title":{},"body":{"controllers/I18nController.html":{}}}],["this.jstlservice.render(data.body",{"_index":399,"title":{},"body":{"controllers/TemplateController.html":{}}}],["this.jstlservice.render(element.body",{"_index":175,"title":{},"body":{"controllers/I18nController.html":{}}}],["this.jstlservice.render(template.body",{"_index":392,"title":{},"body":{"controllers/TemplateController.html":{}}}],["this.lambdaservice.getlambdafromdid",{"_index":500,"title":{},"body":{"injectables/TransformerService.html":{}}}],["this.lambdaservice.process",{"_index":260,"title":{},"body":{"controllers/LambdaController.html":{}}}],["this.lambdaservice.process(lambda",{"_index":256,"title":{},"body":{"controllers/LambdaController.html":{},"injectables/TransformerService.html":{}}}],["this.logger.verbose('prisma",{"_index":359,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.logger.warn('prisma",{"_index":362,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.nunjucks",{"_index":203,"title":{},"body":{"injectables/JinjaService.html":{}}}],["this.nunjucks.configure",{"_index":205,"title":{},"body":{"injectables/JinjaService.html":{}}}],["this.nunjucks.renderstring(templatetext",{"_index":207,"title":{},"body":{"injectables/JinjaService.html":{}}}],["this.prisma.lambda.create",{"_index":264,"title":{},"body":{"controllers/LambdaController.html":{}}}],["this.prisma.lambda.delete",{"_index":270,"title":{},"body":{"controllers/LambdaController.html":{}}}],["this.prisma.lambda.findunique",{"_index":254,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/LambdaService.html":{}}}],["this.prisma.template",{"_index":425,"title":{},"body":{"injectables/TemplateService.html":{}}}],["this.prisma.template.create",{"_index":98,"title":{},"body":{"injectables/AppService.html":{}}}],["this.prisma.template.delete",{"_index":431,"title":{},"body":{"injectables/TemplateService.html":{}}}],["this.prisma.template.findmany",{"_index":97,"title":{},"body":{"injectables/AppService.html":{},"injectables/TemplateService.html":{}}}],["this.prisma.template.findunique",{"_index":145,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{}}}],["this.prisma.template.update",{"_index":430,"title":{},"body":{"injectables/TemplateService.html":{}}}],["this.prisma.transformer.create",{"_index":464,"title":{},"body":{"controllers/TransformerController.html":{}}}],["this.prisma.transformer.delete",{"_index":465,"title":{},"body":{"controllers/TransformerController.html":{}}}],["this.prisma.transformer.findunique",{"_index":445,"title":{},"body":{"controllers/TransformerController.html":{}}}],["this.process(lambda",{"_index":303,"title":{},"body":{"controllers/LambdaService.html":{}}}],["this.processinternalfunction(transformer",{"_index":480,"title":{},"body":{"injectables/TransformerService.html":{}}}],["this.processoptions(transformer",{"_index":479,"title":{},"body":{"injectables/TransformerService.html":{}}}],["this.templateservice.createtemplate(templatedata",{"_index":139,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["this.templateservice.deletetemplate",{"_index":402,"title":{},"body":{"controllers/TemplateController.html":{}}}],["this.templateservice.template",{"_index":403,"title":{},"body":{"controllers/TemplateController.html":{}}}],["this.transformerservice.process",{"_index":165,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["this.transformerservice.processinternalfunction",{"_index":451,"title":{},"body":{"controllers/TransformerController.html":{}}}],["this.transformerservice.processoptions",{"_index":448,"title":{},"body":{"controllers/TransformerController.html":{}}}],["this.vm",{"_index":293,"title":{},"body":{"controllers/LambdaService.html":{},"injectables/VMService.html":{}}}],["this.vm.on('console.log",{"_index":326,"title":{},"body":{"controllers/LambdaService.html":{}}}],["this.vm.run(body",{"_index":335,"title":{},"body":{"controllers/LambdaService.html":{}}}],["though",{"_index":658,"title":{},"body":{"index.html":{}}}],["throw",{"_index":179,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{},"injectables/TransformerService.html":{}}}],["todo",{"_index":482,"title":{},"body":{"injectables/TransformerService.html":{}}}],["transformeddata",{"_index":162,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["transformer",{"_index":150,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"index.html":{}}}],["transformer.path",{"_index":167,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["transformer.service",{"_index":443,"title":{},"body":{"controllers/TransformerController.html":{}}}],["transformer.transformer",{"_index":166,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["transformer.type",{"_index":446,"title":{},"body":{"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["transformer/transformer.service",{"_index":129,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["transformer1",{"_index":628,"title":{},"body":{"index.html":{}}}],["transformer2",{"_index":630,"title":{},"body":{"index.html":{}}}],["transformerconfig",{"_index":475,"title":{},"body":{"injectables/TransformerService.html":{}}}],["transformerconfig.functiondid",{"_index":501,"title":{},"body":{"injectables/TransformerService.html":{}}}],["transformerconfig.meta.options",{"_index":492,"title":{},"body":{"injectables/TransformerService.html":{}}}],["transformercontroller",{"_index":58,"title":{"controllers/TransformerController.html":{}},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{},"controllers/TransformerController.html":{},"coverage.html":{}}}],["transformers",{"_index":149,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"index.html":{}}}],["transformerservice",{"_index":51,"title":{"injectables/TransformerService.html":{}},"body":{"modules/AppModule.html":{},"controllers/I18nController.html":{},"modules/RPCModule.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"coverage.html":{},"overview.html":{}}}],["transformertype",{"_index":441,"title":{},"body":{"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["transformertype.function_external",{"_index":481,"title":{},"body":{"injectables/TransformerService.html":{}}}],["transformertype.function_internal",{"_index":450,"title":{},"body":{"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["transformertype.options",{"_index":447,"title":{},"body":{"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["true",{"_index":151,"title":{},"body":{"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{}}}],["try",{"_index":323,"title":{},"body":{"controllers/LambdaService.html":{},"controllers/TemplateController.html":{}}}],["ts",{"_index":290,"title":{},"body":{"controllers/LambdaService.html":{}}}],["ts.transpile(lambda.body",{"_index":332,"title":{},"body":{"controllers/LambdaService.html":{}}}],["tsconfig.json",{"_index":647,"title":{},"body":{"index.html":{}}}],["type",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":674,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":182,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["types/nunjucks",{"_index":553,"title":{},"body":{"dependencies.html":{}}}],["ui",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["unlicensed",{"_index":672,"title":{},"body":{"properties.html":{}}}],["up",{"_index":639,"title":{},"body":{"index.html":{}}}],["update",{"_index":609,"title":{},"body":{"index.html":{}}}],["updatetemplate",{"_index":405,"title":{},"body":{"injectables/TemplateService.html":{}}}],["updatetemplate(params",{"_index":417,"title":{},"body":{"injectables/TemplateService.html":{}}}],["use",{"_index":592,"title":{},"body":{"index.html":{}}}],["used",{"_index":654,"title":{},"body":{"index.html":{}}}],["userwhereuniqueinput",{"_index":413,"title":{},"body":{"injectables/TemplateService.html":{}}}],["uuid",{"_index":27,"title":{},"body":{"controllers/AppController.html":{}}}],["v4",{"_index":26,"title":{},"body":{"controllers/AppController.html":{}}}],["valid",{"_index":318,"title":{},"body":{"controllers/LambdaService.html":{}}}],["validate",{"_index":199,"title":{},"body":{"injectables/JinjaService.html":{}}}],["value",{"_index":107,"title":{},"body":{"injectables/EjsService.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"injectables/PrismaService.html":{},"injectables/TransformerService.html":{},"index.html":{}}}],["variables",{"_index":215,"title":{},"body":{"injectables/JsTLService.html":{}}}],["verify",{"_index":308,"title":{},"body":{"controllers/LambdaService.html":{}}}],["version",{"_index":669,"title":{},"body":{"properties.html":{}}}],["vm",{"_index":286,"title":{},"body":{"controllers/LambdaService.html":{},"injectables/VMService.html":{}}}],["vm.service",{"_index":292,"title":{},"body":{"controllers/LambdaService.html":{}}}],["vm2",{"_index":287,"title":{},"body":{"controllers/LambdaService.html":{},"injectables/VMService.html":{},"dependencies.html":{}}}],["vmservice",{"_index":43,"title":{"injectables/VMService.html":{}},"body":{"modules/AppModule.html":{},"controllers/LambdaService.html":{},"modules/SingletonServiceModule.html":{},"injectables/VMService.html":{},"coverage.html":{},"overview.html":{}}}],["vmservice.vm",{"_index":294,"title":{},"body":{"controllers/LambdaService.html":{}}}],["void",{"_index":508,"title":{},"body":{"injectables/VMService.html":{}}}],["without",{"_index":181,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["world",{"_index":632,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":596,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/SingletonServiceModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getStudent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getStudent\n                        \n                    \n                \n            \n            \n                \ngetStudent(data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod('StudentController', 'GetStudent')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { GrpcMethod } from '@nestjs/microservices';\nimport { v4 as uuid } from 'uuid';\n\n@Controller()\nexport class AppController {\n  @GrpcMethod('StudentController', 'GetStudent')\n  getStudent(data: any): any {\n    return 1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_exports\n\n\n\n\nSingletonServiceModule\n\nSingletonServiceModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nSingletonServiceModule->AppModule\n\n\n\n\n\nVMService \n\nVMService \n\nVMService  -->\n\nAppModule->VMService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuditService\n\nAuditService\n\nAppModule -->\n\nAuditService->AppModule\n\n\n\n\n\nEjsService\n\nEjsService\n\nAppModule -->\n\nEjsService->AppModule\n\n\n\n\n\nJinjaService\n\nJinjaService\n\nAppModule -->\n\nJinjaService->AppModule\n\n\n\n\n\nJsTLService\n\nJsTLService\n\nAppModule -->\n\nJsTLService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nTemplateService\n\nTemplateService\n\nAppModule -->\n\nTemplateService->AppModule\n\n\n\n\n\nTransformerService\n\nTransformerService\n\nAppModule -->\n\nTransformerService->AppModule\n\n\n\n\n\nVMService\n\nVMService\n\nAppModule -->\n\nVMService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            AuditService\n                        \n                        \n                            EjsService\n                        \n                        \n                            JinjaService\n                        \n                        \n                            JsTLService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            TemplateService\n                        \n                        \n                            TransformerService\n                        \n                        \n                            VMService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LambdaController\n                        \n                        \n                            TransformerController\n                        \n                        \n                            TemplateController\n                        \n                        \n                            LambdaService\n                        \n                        \n                            I18nController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SingletonServiceModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            VMService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AppService } from './app.service';\nimport { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\nimport { JsTLService } from 'src/engines/jstl/jstl.service';\nimport { TemplateService } from './core/template/template.service';\nimport { AuditService } from './core/audit/audit.service';\nimport { LambdaService } from './core/lambda/lambda.service';\nimport { LambdaController } from './core/lambda/lambda.controller';\nimport { TransformerService } from './core/transformer/transformer.service';\nimport { TransformerController } from './core/transformer/transformer.controller';\nimport { TemplateController } from './core/template/template.controller';\nimport { JinjaService } from './engines/jinja/jinja.service';\nimport { EjsService } from './engines/ejs/ejs.service';\nimport { VMService } from './core/lambda/vm.service';\nimport { SingletonServiceModule } from './singletonService.module';\nimport { I18nController } from './core/i18n/i18n/i18n.controller';\n\n@Module({\n  imports: [SingletonServiceModule],\n  controllers: [\n    LambdaController,\n    TransformerController,\n    TemplateController,\n    LambdaService,\n    I18nController,\n  ],\n  exports: [VMService],\n  providers: [\n    AppService,\n    PrismaService,\n    JsTLService,\n    TemplateService,\n    AuditService,\n    LambdaService,\n    TransformerService,\n    JinjaService,\n    EjsService,\n    VMService,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTemplate\n                            \n                            \n                                    Async\n                                getAllTemplates\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTemplate(data: Prisma.TemplateCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.TemplateCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllTemplates\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllTemplates()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Prisma, Template } from '@prisma/client';\n\nimport { Injectable } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Injectable()\nexport class AppService {\n  constructor(private prisma: PrismaService) {}\n\n  async getAllTemplates(): Promise {\n    return this.prisma.template.findMany();\n  }\n\n  async createTemplate(data: Prisma.TemplateCreateInput): Promise {\n    return this.prisma.template.create({\n      data,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuditService.html":{"url":"injectables/AuditService.html","title":"injectable - AuditService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuditService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/audit/audit.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AuditService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EjsService.html":{"url":"injectables/EjsService.html","title":"injectable - EjsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EjsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/engines/ejs/ejs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                engine\n                            \n                            \n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/engines/ejs/ejs.service.ts:6\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        engine\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ejs\n\n                    \n                \n                    \n                        \n                                Defined in src/engines/ejs/ejs.service.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/engines/ejs/ejs.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport ejs from 'ejs';\n\n@Injectable()\nexport class EjsService {\n  engine: ejs;\n  constructor() {}\n\n  render = (templateText: string, data: any, fallback: string = '') => {\n    return this.engine.render(templateText, data);\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/I18nController.html":{"url":"controllers/I18nController.html","title":"controller - I18nController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  I18nController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/i18n/i18n/i18n.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                i18n\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addTemplate\n                            \n                            \n                                    Async\n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    addTemplate(templateData: Prisma.TemplateCreateInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/core/i18n/i18n/i18n.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    templateData\n                                    \n                                            Prisma.TemplateCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render(renderDto: RenderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('process')\n                \n            \n\n            \n                \n                    Defined in src/core/i18n/i18n/i18n.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderDto\n                                    \n                                                RenderDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post } from '@nestjs/common';\nimport { Template, TemplateType, Prisma } from '@prisma/client';\nimport { PrismaService } from '../../../prisma.service';\nimport { TransformerService } from '../../transformer/transformer.service';\nimport { RenderDto, RenderDtoTest, RenderResponse } from '../../dto/render';\nimport { JsTLService } from 'src/engines/jstl/jstl.service';\nimport { TemplateService } from '../../template/template.service';\nimport { JinjaService } from 'src/engines/jinja/jinja.service';\nimport { EjsService } from 'src/engines/ejs/ejs.service';\n\n@Controller('i18n')\nexport class I18nController {\n  constructor(\n    private readonly jinjaService: JinjaService,\n    private readonly ejsService: EjsService,\n    private readonly prisma: PrismaService,\n    private readonly transformerService: TransformerService,\n    private readonly templateService: TemplateService,\n    private readonly jstlService: JsTLService,\n  ) {}\n\n  @Post()\n  async addTemplate(\n    @Body() templateData: Prisma.TemplateCreateInput,\n  ): Promise {\n    return this.templateService.createTemplate(templateData);\n  }\n\n  @Post('process')\n  async render(@Body() renderDto: RenderDto): Promise {\n    let processed;\n    let template;\n    if (renderDto.data.lang == null) {\n      processed = [];\n      template = await this.prisma.template.findUnique({\n        where: { id: renderDto.id },\n        include: {\n          transformers: {\n            include: {\n              transformer: true,\n            },\n          },\n          bodyI18n: {\n            select: {\n              body: true,\n              lang: true,\n            },\n          },\n        },\n      });\n      const bodyArr = template.bodyI18n;\n      if (bodyArr.length > 0) {\n        bodyArr.forEach(async (element) => {\n          let transformedData = renderDto.data;\n          for (const transformer of template.transformers) {\n            transformedData = await this.transformerService.process(\n              transformer.transformer,\n              transformedData,\n              transformer.path,\n            );\n          }\n          let proc;\n          switch (template.type) {\n            case TemplateType.JINJA:\n              proc = this.jinjaService.render(element.body, transformedData);\n\n            case TemplateType.JS_TEMPLATE_LITERALS:\n              proc = this.jstlService.render(element.body, transformedData);\n              break;\n\n            case TemplateType.EJS:\n              proc = this.ejsService.render(element.body, transformedData);\n              break;\n            default:\n              throw 'Templates without template types not allowed';\n          }\n          console.log({ lang: element.lang, processed: proc });\n          processed.push({ lang: element.lang, processed: proc });\n        });\n      } else {\n        processed = {\n          err: 'No template found for type ' + renderDto.data.type,\n        };\n      }\n    } else {\n      template = await this.prisma.template.findUnique({\n        where: { id: renderDto.id },\n        include: {\n          transformers: {\n            include: {\n              transformer: true,\n            },\n          },\n          bodyI18n: {\n            where: { lang: renderDto.data.lang },\n          },\n        },\n      });\n      let transformedData = renderDto.data;\n      for (const transformer of template.transformers) {\n        transformedData = await this.transformerService.process(\n          transformer.transformer,\n          transformedData,\n          transformer.path,\n        );\n      }\n      switch (template.type) {\n        case TemplateType.JINJA:\n          processed = this.jinjaService.render(\n            template.bodyI18n[0].body,\n            transformedData,\n          );\n\n        case TemplateType.JS_TEMPLATE_LITERALS:\n          processed = this.jstlService.render(\n            template.bodyI18n[0].body,\n            transformedData,\n          );\n          break;\n\n        case TemplateType.EJS:\n          processed = this.ejsService.render(\n            template.bodyI18n[0].body,\n            transformedData,\n          );\n          break;\n        default:\n          throw 'Templates without template types not allowed';\n      }\n    }\n    return {\n      processed,\n      templateType: TemplateType.JS_TEMPLATE_LITERALS,\n      data: renderDto.data,\n      template: 'test',\n      meta: template.meta,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JinjaService.html":{"url":"injectables/JinjaService.html","title":"injectable - JinjaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JinjaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/engines/jinja/jinja.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                nunjucks\n                            \n                            \n                                render\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/engines/jinja/jinja.service.ts:5\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        nunjucks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/engines/jinja/jinja.service.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/engines/jinja/jinja.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/engines/jinja/jinja.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class JinjaService {\n  nunjucks: any;\n\n  constructor() {\n    this.nunjucks = require('nunjucks');\n    this.nunjucks.configure({ autoescape: true });\n  }\n\n  render = (templateText: string, data: any, fallback: string = '') => {\n    return this.nunjucks.renderString(templateText, data);\n  };\n\n  validate = (templateText: string): boolean => {\n    return this.nunjucks.renderString(templateText, {});\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JsTLService.html":{"url":"injectables/JsTLService.html","title":"injectable - JsTLService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JsTLService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/engines/jstl/jstl.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                getObjPath\n                            \n                            \n                                interpolate\n                            \n                            \n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        getObjPath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/engines/jstl/jstl.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interpolate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/engines/jstl/jstl.service.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/engines/jstl/jstl.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class JsTLService {\n  interpolate = (template, variables, fallback) => {\n    console.log({ template, variables, fallback });\n    const regex = /\\${[^{]+}/g;\n    return template.replace(regex, (match) => {\n      const path = match.slice(2, -1).trim();\n      return this.getObjPath(path, variables, fallback);\n    });\n  };\n\n  //get the specified property or nested property of an object\n  getObjPath = (path, obj, fallback = '') => {\n    return path.split('.').reduce((res, key) => res[key] || fallback, obj);\n  };\n\n  render = (templateText: string, data: any, fallback: string = '') => {\n    return this.interpolate(templateText, data, fallback);\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LambdaController.html":{"url":"controllers/LambdaController.html","title":"controller - LambdaController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LambdaController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/lambda/lambda.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                lambda\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addLambda\n                            \n                            \n                                    Async\n                                deleteTemplate\n                            \n                            \n                                    Async\n                                getTemplate\n                            \n                            \n                                    Async\n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addLambda\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLambda(data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')\n                \n            \n\n            \n                \n                    Defined in src/core/lambda/lambda.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTemplate(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/core/lambda/lambda.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTemplate(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/core/lambda/lambda.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render(renderDto: RenderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/process')\n                \n            \n\n            \n                \n                    Defined in src/core/lambda/lambda.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderDto\n                                    \n                                                RenderDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post } from '@nestjs/common';\nimport { Template, TemplateType, Prisma, Lambda } from '@prisma/client';\nimport { RenderDto, RenderResponse } from '../dto/render';\nimport { PrismaService } from '../../prisma.service';\nimport { LambdaJustBody, RunFeedback } from './interfaces';\nimport { LambdaService } from './lambda.service';\nimport { GrpcMethod } from '@nestjs/microservices';\n\n@Controller('lambda')\nexport class LambdaController {\n  constructor(\n    private readonly lambdaService: LambdaService,\n    private prisma: PrismaService,\n  ) {}\n\n  @Post('/process')\n  async render(@Body() renderDto: RenderDto): Promise {\n    const lambda = await this.prisma.lambda.findUnique({\n      where: { id: Number(renderDto.id) },\n    });\n    console.log({ lambda });\n    return this.lambdaService.process(lambda, renderDto.data);\n  }\n\n  @Post('/')\n  async addLambda(\n    @Body() data: { lambda: Prisma.LambdaCreateInput; testData: any },\n  ): Promise {\n    const testDataProcessResult = this.lambdaService.process(\n      data.lambda,\n      data.testData,\n    );\n    if (testDataProcessResult.statusCode === 1) {\n      return this.prisma.lambda.create({\n        data: data.lambda,\n      });\n    } else {\n      console.error(\n        \"Can't add lambda, test data failed\",\n        testDataProcessResult,\n      );\n      return testDataProcessResult;\n    }\n  }\n\n  @Delete('/:id')\n  async deleteTemplate(@Param('id') id: string): Promise {\n    return this.prisma.lambda.delete({ where: { id: Number(id) } });\n  }\n\n  @Get('/:id')\n  async getTemplate(@Param('id') id: string): Promise {\n    return this.prisma.lambda.findUnique({ where: { id: Number(id) } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LambdaService.html":{"url":"controllers/LambdaService.html","title":"controller - LambdaService","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LambdaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/lambda/lambda.service.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getLambdaFromDID\n                            \n                            \n                                process\n                            \n                            \n                                    Async\n                                processRPC\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getLambdaFromDID\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLambdaFromDID(did: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/lambda/lambda.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    did\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        process\n                        \n                    \n                \n            \n            \n                \nprocess(lambda: Lambda | Prisma.LambdaCreateInput | LambdaJustBody, data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/core/lambda/lambda.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lambda\n                                    \n                                                Lambda | Prisma.LambdaCreateInput | LambdaJustBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         RunFeedback\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        processRPC\n                        \n                    \n                \n            \n            \n                \n                    \n                    processRPC(lambda: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod('LambdaService', 'Process')\n                \n            \n\n            \n                \n                    Defined in src/core/lambda/lambda.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lambda\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Injectable } from '@nestjs/common';\nimport { Lambda, Language, Prisma } from '@prisma/client';\nimport { LambdaJustBody, RunFeedback } from './interfaces';\nimport { NodeVM, VM } from 'vm2';\nimport { performance } from 'perf_hooks';\nimport ts = require('typescript');\nimport { PrismaService } from '../../prisma.service';\nimport { GrpcMethod } from '@nestjs/microservices';\nimport { VMService } from './vm.service';\n\n// @Injectable()\n@Controller()\nexport class LambdaService {\n  vm: NodeVM;\n  constructor(private prisma: PrismaService, private vmService: VMService) {\n    this.vm = vmService.vm;\n  }\n\n  async getLambdaFromDID(did: string): Promise {\n    // find lambda by did from Prisma. Example did = 'did:internal:1'\n    // Get the last part of the did\n    const didParts = did.split(':');\n    const id = didParts[didParts.length - 1];\n    return await this.prisma.lambda.findUnique({ where: { id: Number(id) } });\n  }\n\n  @GrpcMethod('LambdaService', 'Process')\n  async processRPC(lambda: {\n    body: string;\n    language: Language;\n    testData: string;\n  }): Promise {\n    const data = await this.process(lambda, JSON.parse(lambda.testData))\n      .response;\n    console.log(data);\n    return {\n      result: data,\n    };\n  }\n\n  process(\n    lambda: Lambda | Prisma.LambdaCreateInput | LambdaJustBody,\n    data: any,\n  ): RunFeedback {\n    // Regex to verify function(data) signature\n    const regex = /^function\\s*\\(([^)]*)\\)\\s*\\{/;\n    const match = regex.exec(lambda.body);\n    if (!match) {\n      return {\n        statusCode: 3,\n        statusMessage:\n          'ERROR: The function signature is not valid. It should be function(data)',\n        error: 'Invalid Lambda. It should start with \"function(data) {\"',\n        response: null,\n        executionTimeInMs: 0,\n        consoleOutput: [],\n      };\n    } else {\n      try {\n        const startTime = performance.now();\n        const consoleOutput: string[] = [];\n        this.vm.on('console.log', (log) => {\n          consoleOutput.push(JSON.stringify(log));\n        });\n        if (lambda.language === Language.TYPESCRIPT) {\n          lambda.body = ts.transpile(lambda.body);\n        }\n        const body = `module.exports = ${lambda.body}`;\n        const functionInSandbox = this.vm.run(body);\n        const result = functionInSandbox(data);\n        const endTime = performance.now();\n        return {\n          statusCode: 1,\n          statusMessage: 'OK',\n          error: null,\n          response: result,\n          consoleOutput: consoleOutput,\n          executionTimeInMs: endTime - startTime,\n        };\n      } catch (e) {\n        console.error(e);\n        return {\n          statusCode: 0,\n          statusMessage: 'ERROR',\n          error: e.message,\n          response: null,\n          consoleOutput: null,\n          executionTimeInMs: null,\n        };\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(PrismaService.name)\n                    \n                \n                    \n                        \n                                Defined in src/prisma.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  INestApplication,\n  Injectable,\n  Logger,\n  OnModuleInit,\n} from '@nestjs/common';\n\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  private readonly logger = new Logger(PrismaService.name);\n  async onModuleInit() {\n    await this.$connect();\n    this.logger.verbose('Prisma connected');\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      this.logger.warn('Prisma existing');\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RPCModule.html":{"url":"modules/RPCModule.html","title":"module - RPCModule","body":"\n                   \n\n\n\n\n    Modules\n    RPCModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/rpc.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AppService } from './app.service';\nimport { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\nimport { JsTLService } from 'src/engines/jstl/jstl.service';\nimport { TemplateService } from './core/template/template.service';\nimport { AuditService } from './core/audit/audit.service';\nimport { LambdaService } from './core/lambda/lambda.service';\nimport { LambdaController } from './core/lambda/lambda.controller';\nimport { TransformerService } from './core/transformer/transformer.service';\nimport { TransformerController } from './core/transformer/transformer.controller';\nimport { TemplateController } from './core/template/template.controller';\nimport { JinjaService } from './engines/jinja/jinja.service';\nimport { EjsService } from './engines/ejs/ejs.service';\nimport { AppController } from './app.controller';\n\n@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [],\n})\nexport class RPCModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RenderDto.html":{"url":"interfaces/RenderDto.html","title":"interface - RenderDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RenderDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/dto/render.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { TemplateType } from '.prisma/client';\n\nexport interface RenderDto {\n  id: number;\n  data: any;\n  path?: string;\n}\n\nexport interface RenderDtoTest {\n  sampleData: any;\n  body: string;\n  type: TemplateType;\n}\n\nexport interface RenderResponse {\n  processed: string | string[];\n  templateType: TemplateType;\n  data: any;\n  template: string;\n  meta?: any;\n}\n\nexport interface SampleData {\n  data: any;\n  path: string;\n  response: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RenderDtoTest.html":{"url":"interfaces/RenderDtoTest.html","title":"interface - RenderDtoTest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RenderDtoTest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/dto/render.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            sampleData\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sampleData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sampleData:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     TemplateType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TemplateType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { TemplateType } from '.prisma/client';\n\nexport interface RenderDto {\n  id: number;\n  data: any;\n  path?: string;\n}\n\nexport interface RenderDtoTest {\n  sampleData: any;\n  body: string;\n  type: TemplateType;\n}\n\nexport interface RenderResponse {\n  processed: string | string[];\n  templateType: TemplateType;\n  data: any;\n  template: string;\n  meta?: any;\n}\n\nexport interface SampleData {\n  data: any;\n  path: string;\n  response: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RenderResponse.html":{"url":"interfaces/RenderResponse.html","title":"interface - RenderResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RenderResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/dto/render.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            meta\n                                        \n                                \n                                \n                                        \n                                            processed\n                                        \n                                \n                                \n                                        \n                                            template\n                                        \n                                \n                                \n                                        \n                                            templateType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        processed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        processed:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        template\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        template:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        templateType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        templateType:     TemplateType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TemplateType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { TemplateType } from '.prisma/client';\n\nexport interface RenderDto {\n  id: number;\n  data: any;\n  path?: string;\n}\n\nexport interface RenderDtoTest {\n  sampleData: any;\n  body: string;\n  type: TemplateType;\n}\n\nexport interface RenderResponse {\n  processed: string | string[];\n  templateType: TemplateType;\n  data: any;\n  template: string;\n  meta?: any;\n}\n\nexport interface SampleData {\n  data: any;\n  path: string;\n  response: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RunFeedback.html":{"url":"interfaces/RunFeedback.html","title":"interface - RunFeedback","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RunFeedback\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/lambda/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            consoleOutput\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            executionTimeInMs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            response\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                                \n                                        \n                                            statusMessage\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        consoleOutput\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        consoleOutput:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        executionTimeInMs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        executionTimeInMs:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        response:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusMessage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Language } from '@prisma/client';\n\nexport interface RunFeedback {\n  statusCode: number;\n  statusMessage: string;\n  error?: string;\n  response?: any;\n  executionTimeInMs: number;\n  consoleOutput: string[];\n}\n\nexport type LambdaJustBody = {\n  body: string;\n  language: Language;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SampleData.html":{"url":"interfaces/SampleData.html","title":"interface - SampleData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SampleData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/dto/render.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            response\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        response:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { TemplateType } from '.prisma/client';\n\nexport interface RenderDto {\n  id: number;\n  data: any;\n  path?: string;\n}\n\nexport interface RenderDtoTest {\n  sampleData: any;\n  body: string;\n  type: TemplateType;\n}\n\nexport interface RenderResponse {\n  processed: string | string[];\n  templateType: TemplateType;\n  data: any;\n  template: string;\n  meta?: any;\n}\n\nexport interface SampleData {\n  data: any;\n  path: string;\n  response: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SingletonServiceModule.html":{"url":"modules/SingletonServiceModule.html","title":"module - SingletonServiceModule","body":"\n                   \n\n\n\n\n    Modules\n    SingletonServiceModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SingletonServiceModule\n\n\n\ncluster_SingletonServiceModule_exports\n\n\n\ncluster_SingletonServiceModule_providers\n\n\n\n\nVMService \n\nVMService \n\n\n\nSingletonServiceModule\n\nSingletonServiceModule\n\nVMService  -->\n\nSingletonServiceModule->VMService \n\n\n\n\n\nVMService\n\nVMService\n\nSingletonServiceModule -->\n\nVMService->SingletonServiceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/singletonService.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            VMService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            VMService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { VMService } from './core/lambda/vm.service';\n\n@Module({\n  imports: [],\n  controllers: [],\n  exports: [VMService],\n  providers: [VMService],\n})\nexport class SingletonServiceModule {\n  constructor(private vmService: VMService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TemplateController.html":{"url":"controllers/TemplateController.html","title":"controller - TemplateController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TemplateController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/template/template.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addTemplate\n                            \n                            \n                                    Async\n                                deleteTemplate\n                            \n                            \n                                    Async\n                                getTemplate\n                            \n                            \n                                    Async\n                                render\n                            \n                            \n                                    Async\n                                renderTest\n                            \n                            \n                                    Async\n                                renderTestMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    addTemplate(templateData: Prisma.TemplateCreateInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')\n                \n            \n\n            \n                \n                    Defined in src/core/template/template.controller.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    templateData\n                                    \n                                            Prisma.TemplateCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTemplate(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/core/template/template.controller.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTemplate(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/core/template/template.controller.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render(renderDto: RenderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/process')\n                \n            \n\n            \n                \n                    Defined in src/core/template/template.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderDto\n                                    \n                                                RenderDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        renderTest\n                        \n                    \n                \n            \n            \n                \n                    \n                    renderTest(data: RenderDtoTest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/process/test')\n                \n            \n\n            \n                \n                    Defined in src/core/template/template.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                RenderDtoTest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        renderTestMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    renderTestMany(data: RenderDtoTest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/process/testMany')\n                \n            \n\n            \n                \n                    Defined in src/core/template/template.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                RenderDtoTest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post } from '@nestjs/common';\nimport { Template, TemplateType, Prisma } from '@prisma/client';\nimport { PrismaService } from '../../prisma.service';\nimport { TransformerService } from '../transformer/transformer.service';\nimport { RenderDto, RenderDtoTest, RenderResponse } from '../dto/render';\nimport { JsTLService } from 'src/engines/jstl/jstl.service';\nimport { TemplateService } from './template.service';\nimport { JinjaService } from 'src/engines/jinja/jinja.service';\nimport { EjsService } from 'src/engines/ejs/ejs.service';\n\n@Controller('/')\nexport class TemplateController {\n  constructor(\n    private readonly jinjaService: JinjaService,\n    private readonly ejsService: EjsService,\n    private readonly prisma: PrismaService,\n    private readonly transformerService: TransformerService,\n    private readonly templateService: TemplateService,\n    private readonly jstlService: JsTLService,\n  ) {}\n\n  @Post('/process')\n  async render(@Body() renderDto: RenderDto): Promise {\n    const template = await this.prisma.template.findUnique({\n      where: { id: renderDto.id },\n      include: {\n        transformers: {\n          include: {\n            transformer: true,\n          },\n        },\n      },\n    });\n    let processed;\n\n    let transformedData = renderDto.data;\n    for (const transformer of template.transformers) {\n      transformedData = await this.transformerService.process(\n        transformer.transformer,\n        transformedData,\n        transformer.path,\n      );\n    }\n    switch (template.type) {\n      case TemplateType.JINJA:\n        processed = this.jinjaService.render(template.body, transformedData);\n\n      case TemplateType.JS_TEMPLATE_LITERALS:\n        processed = this.jstlService.render(template.body, transformedData);\n        break;\n\n      case TemplateType.EJS:\n        processed = this.ejsService.render(template.body, transformedData);\n        break;\n      default:\n        throw 'Templates without template types not allowed';\n    }\n    return {\n      processed,\n      templateType: TemplateType.JS_TEMPLATE_LITERALS,\n      data: renderDto.data,\n      template: 'test',\n      meta: template.meta,\n    };\n  }\n\n  @Post('/process/test')\n  async renderTest(@Body() data: RenderDtoTest): Promise {\n    let processed;\n    let transformedData;\n    try {\n      transformedData = JSON.parse(data.sampleData);\n    } catch (e) {\n      transformedData = data.sampleData;\n    }\n    // for (const transformer of template.transformers) {\n    //   transformedData = await this.transformerService.process(\n    //     transformer.transformer,\n    //     transformedData,\n    //     transformer.path,\n    //   );\n    // }\n    switch (data.type) {\n      case TemplateType.JINJA:\n        processed = this.jinjaService.render(data.body, transformedData);\n\n      case TemplateType.JS_TEMPLATE_LITERALS:\n        processed = this.jstlService.render(data.body, transformedData);\n        break;\n\n      case TemplateType.EJS:\n        processed = this.ejsService.render(data.body, transformedData);\n        break;\n      default:\n        throw 'Templates without template types not allowed';\n    }\n    return {\n      processed,\n      templateType: TemplateType.JS_TEMPLATE_LITERALS,\n      data: data.sampleData,\n      template: 'test',\n    };\n  }\n\n  @Post('/process/testMany')\n  async renderTestMany(@Body() data: RenderDtoTest): Promise {\n    let processed = [];\n    let transformedData;\n    try {\n      transformedData = JSON.parse(data.sampleData);\n    } catch (e) {\n      transformedData = data.sampleData;\n    }\n    for (let i = 0; i  {\n    return this.templateService.createTemplate(templateData);\n  }\n\n  @Delete('/:id')\n  async deleteTemplate(@Param('id') id: string): Promise {\n    return this.templateService.deleteTemplate({ id: Number(id) });\n  }\n\n  @Get('/:id')\n  async getTemplate(@Param('id') id: string): Promise {\n    return this.templateService.template({ id: Number(id) });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TemplateService.html":{"url":"injectables/TemplateService.html","title":"injectable - TemplateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TemplateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/template/template.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTemplate\n                            \n                            \n                                    Async\n                                deleteTemplate\n                            \n                            \n                                    Async\n                                template\n                            \n                            \n                                    Async\n                                templates\n                            \n                            \n                                    Async\n                                updateTemplate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/core/template/template.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTemplate(data: Prisma.TemplateCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/core/template/template.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.TemplateCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTemplate(where: Prisma.TemplateWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/core/template/template.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                            Prisma.TemplateWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        template\n                        \n                    \n                \n            \n            \n                \n                    \n                    template(userWhereUniqueInput: Prisma.TemplateWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/core/template/template.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userWhereUniqueInput\n                                    \n                                            Prisma.TemplateWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        templates\n                        \n                    \n                \n            \n            \n                \n                    \n                    templates(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/core/template/template.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTemplate(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/core/template/template.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Template, Prisma } from '@prisma/client';\nimport { PrismaService } from '../../prisma.service';\n\n@Injectable()\nexport class TemplateService {\n  constructor(private prisma: PrismaService) {}\n\n  async template(\n    userWhereUniqueInput: Prisma.TemplateWhereUniqueInput,\n  ): Promise {\n    return this.prisma.template.findUnique({\n      where: userWhereUniqueInput,\n      include: {\n        transformers: true,\n      },\n    });\n  }\n\n  async templates(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.TemplateWhereUniqueInput;\n    where?: Prisma.TemplateWhereInput;\n    orderBy?: Prisma.TemplateOrderByWithRelationInput;\n  }): Promise {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prisma.template.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n    });\n  }\n\n  async createTemplate(data: Prisma.TemplateCreateInput): Promise {\n    return this.prisma.template\n      .create({\n        data,\n      })\n      .catch((err) => {\n        console.error({ err: err.message });\n        return null;\n      });\n  }\n\n  async updateTemplate(params: {\n    where: Prisma.TemplateWhereUniqueInput;\n    data: Prisma.TemplateUpdateInput;\n  }): Promise {\n    const { where, data } = params;\n    return this.prisma.template.update({\n      data,\n      where,\n    });\n  }\n\n  async deleteTemplate(\n    where: Prisma.TemplateWhereUniqueInput,\n  ): Promise {\n    return this.prisma.template.delete({\n      where,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TransformerController.html":{"url":"controllers/TransformerController.html","title":"controller - TransformerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TransformerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/transformer/transformer.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                transformer\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addLambda\n                            \n                            \n                                    Async\n                                deleteTemplate\n                            \n                            \n                                    Async\n                                getTemplate\n                            \n                            \n                                    Async\n                                render\n                            \n                            \n                                    Async\n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addLambda\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLambda(data: Prisma.TransformerCreateInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')\n                \n            \n\n            \n                \n                    Defined in src/core/transformer/transformer.controller.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.TransformerCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTemplate(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/core/transformer/transformer.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTemplate(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/core/transformer/transformer.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render(renderDto: RenderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/process')\n                \n            \n\n            \n                \n                    Defined in src/core/transformer/transformer.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderDto\n                                    \n                                                RenderDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        test\n                        \n                    \n                \n            \n            \n                \n                    \n                    test(data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/test')\n                \n            \n\n            \n                \n                    Defined in src/core/transformer/transformer.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post } from '@nestjs/common';\nimport { Prisma, Lambda, Transformer, TransformerType } from '@prisma/client';\nimport { RenderDto, SampleData } from '../dto/render';\nimport { RunFeedback } from 'src/core/lambda/interfaces';\nimport { PrismaService } from '../../prisma.service';\nimport { TransformerService } from './transformer.service';\n\n@Controller('transformer')\nexport class TransformerController {\n  constructor(\n    private readonly transformerService: TransformerService,\n    private prisma: PrismaService,\n  ) {}\n\n  @Post('/process')\n  async render(@Body() renderDto: RenderDto): Promise {\n    const transformer = await this.prisma.transformer.findUnique({\n      where: { id: Number(renderDto.id) },\n    });\n    let result;\n    if (transformer.type === TransformerType.OPTIONS) {\n      result = this.transformerService.processOptions(\n        transformer,\n        renderDto.data,\n        renderDto.path,\n      );\n    } else if (transformer.type === TransformerType.FUNCTION_INTERNAL) {\n      result = this.transformerService.processInternalFunction(\n        transformer,\n        renderDto.data,\n        renderDto.path,\n      );\n    } else {\n      // return not implemented as LambdaRunFeedback\n      return {\n        statusCode: 2,\n        statusMessage: 'Transformer type not implemented',\n        error: 'Transformer type not implemented',\n        response: null,\n        executionTimeInMs: 0,\n        consoleOutput: [],\n      };\n    }\n    return {\n      statusCode: 1,\n      statusMessage: 'SUCCESS',\n      error: null,\n      response: result,\n      executionTimeInMs: 0,\n      consoleOutput: [],\n    };\n  }\n\n  @Post('/test')\n  async test(\n    @Body()\n    data: {\n      transformer: Prisma.TransformerCreateInput;\n      sample: SampleData;\n    },\n  ): Promise {\n    let result;\n    if (data.transformer.type === TransformerType.OPTIONS) {\n      result = this.transformerService.processOptions(\n        data.transformer,\n        data.sample.data,\n        data.sample.path,\n      );\n    } else if (data.transformer.type === TransformerType.FUNCTION_INTERNAL) {\n      result = this.transformerService.processInternalFunction(\n        data.transformer,\n        data.sample.data,\n        data.sample.path,\n      );\n    } else {\n      // return not implemented as LambdaRunFeedback\n      return {\n        statusCode: 2,\n        statusMessage: 'Transformer type not implemented',\n        error: 'Transformer type not implemented',\n        response: null,\n        executionTimeInMs: 0,\n        consoleOutput: [],\n      };\n    }\n    if (JSON.stringify(result) === JSON.stringify(data.sample.response)) {\n      return {\n        statusCode: 1,\n        statusMessage: 'Test successful',\n        error: null,\n        response: result,\n        executionTimeInMs: 0,\n        consoleOutput: [],\n      };\n    } else {\n      return {\n        statusCode: 0,\n        statusMessage: 'Test failed',\n        error: 'Test failed',\n        response: result,\n        executionTimeInMs: 0,\n        consoleOutput: [],\n      };\n    }\n  }\n\n  @Post('/')\n  async addLambda(\n    @Body() data: Prisma.TransformerCreateInput,\n  ): Promise {\n    return this.prisma.transformer.create({\n      data,\n    });\n  }\n\n  @Delete('/:id')\n  async deleteTemplate(@Param('id') id: string): Promise {\n    return this.prisma.transformer.delete({ where: { id: Number(id) } });\n  }\n\n  @Get('/:id')\n  async getTemplate(@Param('id') id: string): Promise {\n    return this.prisma.transformer.findUnique({ where: { id: Number(id) } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformerService.html":{"url":"injectables/TransformerService.html","title":"injectable - TransformerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/transformer/transformer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                process\n                            \n                            \n                                    Async\n                                processInternalFunction\n                            \n                            \n                                processOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(lambdaService: LambdaService)\n                    \n                \n                        \n                            \n                                Defined in src/core/transformer/transformer.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        lambdaService\n                                                  \n                                                        \n                                                                        LambdaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        process\n                        \n                    \n                \n            \n            \n                \n                    \n                    process(transformer: Transformer, data: any, path: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/transformer/transformer.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transformer\n                                    \n                                            Transformer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        processInternalFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    processInternalFunction(transformerConfig: literal type, data: any, path: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/transformer/transformer.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transformerConfig\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        processOptions\n                        \n                    \n                \n            \n            \n                \nprocessOptions(transformerConfig: literal type, data: any, path: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/transformer/transformer.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transformerConfig\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Lambda, Transformer } from '@prisma/client';\nimport { TransformerType } from '@prisma/client';\nimport { LambdaService } from '../lambda/lambda.service';\n\n@Injectable()\nexport class TransformerService {\n  constructor(private lambdaService: LambdaService) {}\n\n  async process(\n    transformer: Transformer,\n    data: any,\n    path: string,\n  ): Promise {\n    if (transformer.type === TransformerType.OPTIONS) {\n      return this.processOptions(transformer, data, path);\n    } else if (transformer.type === TransformerType.FUNCTION_INTERNAL) {\n      return this.processInternalFunction(transformer, data, path);\n    } else if (transformer.type === TransformerType.FUNCTION_EXTERNAL) {\n      return data;\n    }\n  }\n\n  processOptions(\n    transformerConfig: {\n      type: TransformerType;\n      meta?: any; // TODO: fix this to accomoactual type: { options: { key: string; value: string }[] };\n      sampleData?: any;\n    },\n    data: any,\n    path: string,\n  ): any {\n    // Replace the field at the path with the value from the options else return the original value\n    const clonedData = JSON.parse(JSON.stringify(data));\n    const field = path.split('.').pop();\n    const options = transformerConfig.meta.options;\n    const option = options.find((o) => o.key === clonedData[field]);\n    if (option) {\n      clonedData[field] = option.value;\n    }\n    return clonedData;\n  }\n\n  async processInternalFunction(\n    transformerConfig: {\n      type: TransformerType;\n      functionDID?: string;\n      sampleData?: any;\n    },\n    data: any,\n    path: string,\n  ): Promise {\n    const clonedData = JSON.parse(JSON.stringify(data));\n    // get lambda by id from the did and run it\n    const lambda = await this.lambdaService.getLambdaFromDID(\n      transformerConfig.functionDID,\n    );\n    if (lambda) {\n      const result = await this.lambdaService.process(lambda, clonedData);\n      if (result.statusCode === 1) {\n        const field = path.split('.').pop();\n        clonedData[field] = result.response;\n      }\n      return clonedData;\n    } else {\n      throw new Error('Lambda not found');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VMService.html":{"url":"injectables/VMService.html","title":"injectable - VMService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VMService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/lambda/vm.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                vm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/lambda/vm.service.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/core/lambda/vm.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        vm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NodeVM\n\n                    \n                \n                    \n                        \n                                Defined in src/core/lambda/vm.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { NodeVM, VM } from 'vm2';\n\n@Injectable()\nexport class VMService implements OnModuleInit {\n  vm: NodeVM;\n  constructor() {\n    console.log('VM Initialized Constructor');\n    this.vm = new NodeVM({\n      // console: 'redirect',\n      require: {\n        external: false,\n      },\n    });\n  }\n  onModuleInit() {\n    console.log('VM Initialized');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/audit/audit.service.ts\n            \n            injectable\n            AuditService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/dto/render.ts\n            \n            interface\n            RenderDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/dto/render.ts\n            \n            interface\n            RenderDtoTest\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/dto/render.ts\n            \n            interface\n            RenderResponse\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/dto/render.ts\n            \n            interface\n            SampleData\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/i18n/i18n/i18n.controller.ts\n            \n            controller\n            I18nController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/lambda/interfaces.ts\n            \n            interface\n            RunFeedback\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/lambda/lambda.controller.ts\n            \n            controller\n            LambdaController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/lambda/lambda.service.ts\n            \n            controller\n            LambdaService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/lambda/vm.service.ts\n            \n            injectable\n            VMService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/template/template.controller.ts\n            \n            controller\n            TemplateController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/template/template.service.ts\n            \n            injectable\n            TemplateService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/transformer/transformer.controller.ts\n            \n            controller\n            TransformerController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/transformer/transformer.service.ts\n            \n            injectable\n            TransformerService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/engines/ejs/ejs.service.ts\n            \n            injectable\n            EjsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/engines/jinja/jinja.service.ts\n            \n            injectable\n            JinjaService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/engines/jstl/jstl.service.ts\n            \n            injectable\n            JsTLService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @grpc/grpc-js : ^1.6.7\n        \n            @grpc/proto-loader : ^0.6.9\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^1.2.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/microservices : ^8.4.4\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/platform-fastify : ^8.2.6\n        \n            @nestjs/swagger : ^5.1.5\n        \n            @prisma/client : 3.5.0\n        \n            @types/nunjucks : ^3.2.1\n        \n            ejs : ^3.1.6\n        \n            fastify-cors : ^6.0.3\n        \n            fastify-swagger : ^4.15.0\n        \n            json-bigint : ^1.0.0\n        \n            nunjucks : ^3.2.3\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            prisma : 3.5.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.1.6\n        \n            vm2 : ^3.9.7\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDescription\nTemplates as a service.\n\nAPIs to CRUD Templates\nRender(substitute) data in a template.\n\nFeel free to use this as a config manager.\nInstallation\n$ yarn installTemplating languages supported\n\nJavascript Literals + JSON\nJinja (Coming Soon)\n\nAbbreviations\n\nJSTL = Javascript Template Literals.\n\nRunning Migrations\n\nUpdate the schema in schema.prisma.\nRun prisma migrate dev\n\nTransformer Spec\n{\n    path: \"data.username\",\n    type: \"options\", //enum => options, function\n    meta: {\n        options: [\n            {\n                key: 1,\n                value: \"cloudfunctions.googleapis.com\"\n            },\n            {\n                key: 2,\n                value: \"cloudbuild.googleapis.com\"\n            }\n        ]\n    },\n    sampleData: {}\n}Notes\nPublic API Docs for Commenting\n{\n  \"data\": {\n    \"field1\": \"f1\",\n    \"field1\": \"f2\"\n  },\n  \"transformers\": [\n    {\n      \"path\": \"data.field1\",\n      \"transformer\": \"transformer1\"\n    },\n    {\n      \"path\": \"data.field2\",\n      \"transformer\": \"transformer2\"\n    }\n  ],\n  \"meta\": {},\n  \"body\": \"Hello World\",\n  \"templateType\": \"JSTL\"\n}Dev Setup\n\nStart the database and gql server - docker-compose up -d templaterdb gql\nMigrate -prisma migrate dev\nGenerating docs when you are done - npx @compodoc/compodoc -p tsconfig.json -s\nGenerating Swagger docs - `\n\ngRPC\nPostman can send gRPC requests now. This can be used to test the gRPC server. It doesn't allow to share though.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RPCModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SingletonServiceModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_exports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nSingletonServiceModule\n\nSingletonServiceModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nSingletonServiceModule->AppModule\n\n\n\n\n\nVMService \n\nVMService \n\nVMService  -->\n\nSingletonServiceModule->VMService \n\n\n\nVMService  -->\n\nAppModule->VMService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuditService\n\nAuditService\n\nAppModule -->\n\nAuditService->AppModule\n\n\n\n\n\nEjsService\n\nEjsService\n\nAppModule -->\n\nEjsService->AppModule\n\n\n\n\n\nJinjaService\n\nJinjaService\n\nAppModule -->\n\nJinjaService->AppModule\n\n\n\n\n\nJsTLService\n\nJsTLService\n\nAppModule -->\n\nJsTLService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nTemplateService\n\nTemplateService\n\nAppModule -->\n\nTemplateService->AppModule\n\n\n\n\n\nTransformerService\n\nTransformerService\n\nAppModule -->\n\nTransformerService->AppModule\n\n\n\n\n\nVMService\n\nVMService\n\nSingletonServiceModule -->\n\nVMService->SingletonServiceModule\n\n\n\nAppModule -->\n\nVMService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LambdaJustBody   (src/.../interfaces.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/lambda/interfaces.ts\n    \n    \n        \n            \n                \n                    \n                    LambdaJustBody\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
